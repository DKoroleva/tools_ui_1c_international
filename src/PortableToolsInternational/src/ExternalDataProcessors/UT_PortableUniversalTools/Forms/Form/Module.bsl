// Хранилище глобальных переменных.
//
// ПараметрыПриложения - Соответствие - хранилище переменных, где:
//   * Ключ - Строка - имя переменной в формате "ИмяБиблиотеки.ИмяПеременной";
//   * Значение - Произвольный - значение переменной.
//
// Инициализация (на примере СообщенияДляЖурналаРегистрации):
//   ИмяПараметра = "СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации";
//   Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
//     ПараметрыПриложения.Вставить(ИмяПараметра, Новый СписокЗначений);
//   КонецЕсли;
//  
// Использование (на примере СообщенияДляЖурналаРегистрации):
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"].Добавить(...);
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"] = ...;
&AtClient
Var UT_ApplicationParameters_Portable Export;


&AtServer
Procedure OnCreateAtServer(Cancel, StandardProcessing)
	
	DataProcessorObject=FormAttributeToValue("Object");

	File=New File (DataProcessorObject.UsedFileName);
	ToolsDirectory=File.Path;

	СоздатьКомандыОткрытияИнструментовНаФорме();

	Title=Version();

	AlgorithmForCallingDebuggingAtServer="ВнешниеОбработки.Создать(""UT_"")._От(ПараметрыОтладки)";
	AlgorithmForCallingDebuggingAtClient="ПолучитьФорму(""ВнешняяОбработка.UT_.Форма"")._От(ПараметрыОтладки)";
	AlgorithmForCallingDebuggingThroughDataProcessor="ВнешниеОбработки.Создать(""" + DataProcessorObject.UsedFileName
		+ """, Ложь)._От(Запрос)";
EndProcedure


&AtClient
Procedure OnOpen(Cancel)
	ПодключитьВнешниеМодули();
EndProcedure

&AtClient
Procedure OnClose(Exit)
		UT_CommonClient.OnExit();
EndProcedure



&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокЭлементаИнструмента(Имя, Синоним, ТекстПоиска = "")
	Заголовок=Синоним;
	Если Не ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок=Имя;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстПоиска) Тогда
		ЗаголовокИзначальный=Заголовок;
		ЗаголовокДляПоиска=НРег(ЗаголовокИзначальный);
		НовыйЗаголовок="";
		ДлинаСтрокиПоиска=СтрДлина(ТекстПоиска);

		ПозицияСимвола=СтрНайти(ЗаголовокДляПоиска, ТекстПоиска);
		Пока ПозицияСимвола > 0 Цикл
			ФорматированнаяСтрокаПоиска=Новый ФорматированнаяСтрока(Сред(ЗаголовокИзначальный, ПозицияСимвола,
				ДлинаСтрокиПоиска), Новый Шрифт(, , , Истина), WebЦвета.Красный);
			НовыйЗаголовок=Новый ФорматированнаяСтрока(НовыйЗаголовок, Лев(ЗаголовокИзначальный, ПозицияСимвола - 1),
				ФорматированнаяСтрокаПоиска);

			ЗаголовокИзначальный=Сред(ЗаголовокИзначальный, ПозицияСимвола + ДлинаСтрокиПоиска);
			ЗаголовокДляПоиска=НРег(ЗаголовокИзначальный);

			ПозицияСимвола=СтрНайти(ЗаголовокДляПоиска, ТекстПоиска);

		КонецЦикла;

		Если ЗначениеЗаполнено(НовыйЗаголовок) Тогда
			НовыйЗаголовок=Новый ФорматированнаяСтрока(НовыйЗаголовок, ЗаголовокИзначальный);
			Заголовок=НовыйЗаголовок;
		КонецЕсли;
	КонецЕсли;
	Возврат Заголовок;
КонецФункции
&НаКлиенте
Процедура ОбработатьПоиск(СтрокаПоискаПереданная)
	СортированныйСписок=СортированныйСписокМодулейИнструментовДляКнопок();

	Поиск=СокрЛП(НРег(СтрокаПоискаПереданная));

	Для Каждого ЭлементСпискаИнструментов Из СортированныйСписок Цикл
		ВидимостьЭлемента=Истина;
		Если ЗначениеЗаполнено(Поиск) Тогда
			ВидимостьЭлемента=СтрНайти(НРег(ЭлементСпискаИнструментов.Значение), Поиск) > 0 Или СтрНайти(
				НРег(ЭлементСпискаИнструментов.Представление), Поиск) > 0;
		КонецЕсли;

		Элементы[ЭлементСпискаИнструментов.Значение].Видимость=ВидимостьЭлемента;
		Элементы[ЭлементСпискаИнструментов.Значение].Заголовок=ЗаголовокЭлементаИнструмента(
			ЭлементСпискаИнструментов.Значение, ЭлементСпискаИнструментов.Представление, Поиск);
	КонецЦикла;

КонецПроцедуры
&AtClient
Procedure SeacrhStringClearing(Item, StandardProcessing)
	ОбработатьПоиск("");
EndProcedure

&AtClient
Procedure SeacrhStringEditTextChange(Item, Text, StandardProcessing)
	SearchString = Text;
	ОбработатьПоиск(Text);
EndProcedure

&НаКлиенте
Процедура Подключаемый_ОткрытьКомандуИнструмента(Команда)
	ОписанияМодулей=ОписаниеМодулейИнструментовДляПодключения();
	ОписаниеМодуля=ОписанияМодулей[Команда.Имя];

	Если ОписаниеМодуля.Вид = "Отчет" Тогда
		ОткрытьФорму("ВнешнийОтчет." + Команда.Имя + ".Форма", , ЭтаФорма);
	Иначе
		ОткрытьФорму("ВнешняяОбработка." + Команда.Имя + ".Форма", , ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьКомандыОткрытияИнструментовНаФорме()
	ОписаниеИнструментов=СортированныйСписокМодулейИнструментовДляКнопок();
	ОписаниеМодулей=ОписаниеМодулейИнструментовДляПодключения();

	Четный=Ложь;
	Для Каждого ЭлементСписка Из ОписаниеИнструментов Цикл
		Описание=ОписаниеМодулей[ЭлементСписка.Значение];

		Если Описание.НеВыводитьВИнтерфейс Тогда
			Продолжить;
		КонецЕсли;

		Если Четный Тогда
			Родитель=Элементы.GroupToolsCommandsRigth;
		Иначе
			Родитель=Элементы.ГруппаКомандыИнструментовЛево;
		КонецЕсли;

		Элемент=Элементы.Добавить(Описание.Имя, Тип("ДекорацияФормы"), Родитель);
		//Элемент.ИмяКоманды=Описание.Имя;
		Элемент.Заголовок=ЗаголовокЭлементаИнструмента(Описание.Имя, Описание.Синоним);
		Элемент.Вид=ВидДекорацииФормы.Надпись;
		Элемент.Гиперссылка=Истина;
		Элемент.Подсказка=Описание.Подсказка;
		Элемент.ОтображениеПодсказки=ОтображениеПодсказки.ОтображатьСнизу;
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_ОткрытьКомандуИнструмента");

		Четный=Не Четный;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура UT_Settings(Команда)
	ОткрытьФорму("CommonForm.UT_Settings");
КонецПроцедуры

&НаКлиенте
Процедура AskQuestionToDeveloper(Команда)
	UT_CommonClient.AskQuestionToDeveloper();
КонецПроцедуры

&НаКлиенте
Процедура OpenAboutPage(Команда)
	UT_CommonClient.OpenAboutPage();
КонецПроцедуры

&НаКлиенте
Процедура PortableToolsDebugSpecificity(Команда)
	UT_CommonClient.OpenPortableToolsDebugSpecificityPage();
КонецПроцедуры

&НаКлиенте
Процедура RunToolsUpdateCheck(Команда)
	UT_CommonClient.RunToolsUpdateCheck();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйОписаниеМодуля() Экспорт
	Описание=Новый Структура;
	Описание.Вставить("Имя", "");
	Описание.Вставить("Синоним", "");
	Описание.Вставить("ИмяФайла", "");
	Описание.Вставить("Подсказка", "");
	Описание.Вставить("НеВыводитьВИнтерфейс", Ложь);
	Описание.Вставить("Тип", "Инструмент");
	Описание.Вставить("Вид", "Обработка");
	Описание.Вставить("Команды", Неопределено);

	Возврат Описание;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеМодулейИнструментовДляПодключения()
	Описания=Новый Структура;
	
	// МЕТОД ГЕНЕРИРУЕТСЯ ПРИ СБОРКЕ
	
//	ОписаниеИнструмента=НовыйОписаниеМодуля();
//	ОписаниеИнструмента.Имя="УИ_РедакторСКД";
//	Описания.Вставить(ОписаниеИнструмента.Имя,ОписаниеИнструмента);
//	
//	ОписаниеИнструмента=НовыйОписаниеМодуля();
//	ОписаниеИнструмента.Имя="УИ_КонсольОтчетов";
//	ОписаниеИнструмента.Вид="Отчет";
//	Описания.Вставить(ОписаниеИнструмента.Имя,ОписаниеИнструмента);
//	
//	ОписаниеИнструмента=НовыйОписаниеМодуля();
//	ОписаниеИнструмента.Имя="УИ_БуферОбменаКлиент";
//	ОписаниеИнструмента.Тип="ОбщийМодуль";
//	Описания.Вставить(ОписаниеИнструмента.Имя,ОписаниеИнструмента);
//	
//	ОписаниеИнструмента=НовыйОписаниеМодуля();
//	ОписаниеИнструмента.Имя="УИ_ОбщегоНазначенияКлиент";
//	ОписаниеИнструмента.Тип="ОбщийМодуль";
//	Описания.Вставить(ОписаниеИнструмента.Имя,ОписаниеИнструмента);
//	ОписаниеИнструмента=НовыйОписаниеМодуля();
//	
//	ОписаниеИнструмента.Имя="УИ_ОбщегоНазначенияКлиентСервер";
//	ОписаниеИнструмента.Тип="ОбщийМодуль";
//	Описания.Вставить(ОписаниеИнструмента.Имя,ОписаниеИнструмента);
//	
//	ОписаниеИнструмента=НовыйОписаниеМодуля();
//	ОписаниеИнструмента.Имя="УИ_РаботаСФормами";
//	ОписаниеИнструмента.Тип="ОбщийМодуль";
//	Описания.Вставить(ОписаниеИнструмента.Имя,ОписаниеИнструмента);

	Возврат Описания;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СортированныйСписокМодулейИнструментовДляКнопок()
	ОписаниеМодулей=ОписаниеМодулейИнструментовДляПодключения();

	СписокМодулей=Новый СписокЗначений;

	Для Каждого КлючЗначение Из ОписаниеМодулей Цикл
		Описание=КлючЗначение.Значение;
		Если Описание.Тип <> "Инструмент" Тогда
			Продолжить;
		КонецЕсли;
		Если Описание.НеВыводитьВИнтерфейс Тогда
			Продолжить;
		КонецЕсли;

		СписокМодулей.Добавить(Описание.Имя, Описание.Синоним);
	КонецЦикла;

	СписокМодулей.СортироватьПоПредставлению();
	Возврат СписокМодулей;
КонецФункции

&НаКлиенте
Функция ИмяФайлаМодуля(ОписаниеМодуля)
	Если ОписаниеМодуля.Тип = "ОбщийМодуль" Тогда
		КаталогМодуля="ОбщиеМодули";
	ИначеЕсли ОписаниеМодуля.Тип = "ОбщаяКартинка" Тогда
		Возврат КаталогИнструментов + ПолучитьРазделительПути() + "Картинки" + ПолучитьРазделительПути()
			+ ОписаниеМодуля.ИмяФайла;
	Иначе
		КаталогМодуля="Инструменты";
	КонецЕсли;

	Если ОписаниеМодуля.Вид = "Отчет" Тогда
		Расширение="erf";
	Иначе
		Расширение="epf";
	КонецЕсли;

	Возврат КаталогИнструментов + ПолучитьРазделительПути() + КаталогМодуля + ПолучитьРазделительПути()
		+ ОписаниеМодуля.Имя + "." + Расширение;
КонецФункции

&НаКлиенте
Процедура ПодключитьВнешниеМодули()
	Описание=ОписаниеМодулейИнструментовДляПодключения();

	ПомещаемыеФайлы=Новый Массив;

	Для Каждого КлючЗначение Из Описание Цикл
		ТекОписаниеИнструмента=КлючЗначение.Значение;
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайлаМодуля(ТекОписаниеИнструмента)));
	КонецЦикла;

	НачатьПомещениеФайлов(Новый ОписаниеОповещения("ПодключитьВнешниеМодулиЗавершение", ЭтаФорма,
		Новый Структура("ОписаниеИнструментов", Описание)), ПомещаемыеФайлы, , Ложь, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьВнешниеМодулиЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УИ_БиблиотекаКартинок=Новый Структура;

	МодулиДляПодключенияНаСервере=Новый Массив;

	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		Если ВерсияПлатформыНеМладше("8.3.13") Тогда
			ИмяФайла = ПомещенныйФайл.ПолноеИмя;
		Иначе
			ИмяФайла = ПомещенныйФайл.Имя;
		КонецЕсли;

		Файл=Новый Файл(ИмяФайла);
		Если НРег(Файл.Расширение) = ".erf" Тогда
			МодулиДляПодключенияНаСервере.Добавить(Новый Структура("ЭтоОтчет, Адрес", Истина, ПомещенныйФайл.Хранение));
		ИначеЕсли НРег(Файл.Расширение) = ".epf" Тогда
			МодулиДляПодключенияНаСервере.Добавить(Новый Структура("ЭтоОтчет, Адрес", Ложь, ПомещенныйФайл.Хранение));
		Иначе
			УИ_БиблиотекаКартинок.Вставить(Файл.ИмяБезРасширения, Новый Картинка(Файл.ПолноеИмя));
			Продолжить;
		КонецЕсли;
	КонецЦикла;

	ПодключитьВнешниеМодулиНаСервере(МодулиДляПодключенияНаСервере);
	//Теперь можно использовать общие модули

	АдресЛокальнойБиблиотекиКартинок=ПоместитьВоВременноеХранилище(УИ_БиблиотекаКартинок, УникальныйИдентификатор);
	ЗаписатьАдресЛокальнойБиблиотекиКартинокВХранилищеНастроек(АдресЛокальнойБиблиотекиКартинок);

	ПодключитьОбработчикОжидания("ПриОткрытииЗапускОбработчиковЗапускаИнструментов", 0.1, Истина);
КонецПроцедуры

&НаСервере
Процедура ПодключитьВнешниеМодулиНаСервере(МодулиДляПодключенияНаСервере)
	Для Каждого ВнешнийМодуль Из МодулиДляПодключенияНаСервере Цикл
		ConnectExternalDataProcessor(ВнешнийМодуль.Адрес, ВнешнийМодуль.ЭтоОтчет);
	КонецЦикла;
КонецПроцедуры

&AtClient
Procedure ПриОткрытииЗапускОбработчиковЗапускаИнструментов()

	UT_CommonClient.OnStart();

	Items.GroupFormPages.CurrentPage=Items.GroupPageWorkWithTools;

EndProcedure

&AtServer
Function ConnectExternalDataProcessor(StorageURL, IsReport)

	UnsafeOperationProtectionDescription =New UnsafeOperationProtectionDescription;
	UnsafeOperationProtectionDescription.UnsafeOperationWarnings=False;
	If IsReport Then
		Return ExternalReports.Connect(StorageURL, , False, UnsafeOperationProtectionDescription);
	Else
		Return ExternalDataProcessors.Connect(StorageURL, , False, UnsafeOperationProtectionDescription);
	EndIf;
EndFunction

&НаСервере
Процедура ЗаписатьАдресЛокальнойБиблиотекиКартинокВХранилищеНастроек(Адрес)
	UT_Common.FormDataSettingsStorageSave(
		UT_CommonClientServer.ObjectKeyInSettingsStorage(), "АдресЛокальнойБиблиотекиКартинок", Адрес, ,
		UserName());
КонецПроцедуры

&AtClient
Function PlatformVersionNotLess(ComparingVersion) Export
	VersionWithOutReleaseSubnumber=ConfigurationVersionWithoutBuildNumber(CurrentAppVersion());

	Return CompareVersionsWithoutBuildNumber(VersionWithOutReleaseSubnumber, ComparingVersion)>=0;
EndFunction

&AtClient
Function ConfigurationVersionWithoutBuildNumber(Val Version) Export

	Array = StrSplit(Version, ".");

	If Array.Count() < 3 Then
		Return Version;
	EndIf;

	Result = "[Edition].[Subedition].[Release]";
	Result = StrReplace(Result, "[Edition]",    Array[0]);
	Result = StrReplace(Result, "[Subedition]", Array[1]);
	Result = StrReplace(Result, "[Release]",       Array[2]);
	
	Return Result;
EndFunction

&AtClient
Function CurrentAppVersion() Export

	SystemInfo = New SystemInfo;
	Return SystemInfo.AppVersion;

EndFunction

// Compare two strings that contains version info
//
// Parameters:
//  Version1String  - String - number of version in  РР.{M|MM}.RR format
//  Version2String  - String - secound compared version number.
//
// Return Value значение:
//   Integer   - more than 0, if Version1String > Version2String; 0, if version values is equal.
//
&AtClient
Function CompareVersionsWithoutBuildNumber(Val Version1String, Val Version2String) Export

	String1 = ?(IsBlankString(Version1String), "0.0.0", Version1String);
	String2 = ?(IsBlankString(Version2String), "0.0.0", Version2String);
	Version1 = StrSplit(String1, ".");
	If Version1.Count() <> 3 Then
		Raise StrTemplate(NStr("ru = 'Неправильный формат параметра Version1String: %1'; en='Wrong format of parameter Version1String: %1'"), Version1String);
	EndIf;
	Version2 = StrSplit(String2, ".");
	If Version2.Count() <> 3 Then
		Raise StrTemplate(NStr("ru = 'Неправильный формат параметра Version2String: %1'; en='Wrong format of parameter Version2String: %1'"), Version2String);
	EndIf;

	Result = 0;
	For Digit = 0 to 2 do
		Result = Number(Version1[Digit]) - Number(Version2[Digit]);
		If Result <> 0 Then
			Return Result;
		EndIf;
	КонецЦикла;
	Return Result;

EndFunction

&AtClientAtServerNoContext
Function Version() Export

EndFunction

&AtClientAtServerNoContext
Function Vendor() Export

EndFunction


















УИ_ПараметрыПриложения_Портативные = Новый Соответствие;