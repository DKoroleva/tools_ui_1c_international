#Область ОбработчикиСобытийФормы

&НаСервере
Procedure OnCreateAtServer(Cancel, StandardProcessing)
	If Parameters.Property("ОбъектПоиска") Then
		Объект.ИсходныйОбъект = Parameters.ОбъектПоиска;
	EndIf;
	
	UT_Common.ToolFormOnCreateAtServer(ThisObject, Cancel, StandardProcessing);
	
EndProcedure

&НаКлиенте
Procedure OnOpen(Cancel)
	Если ValueIsFilled(Объект.ИсходныйОбъект) Then
		ИсходныйОбъектПриИзменении(Undefined);
		ВыполнитьПоискСсылок();
	КонецЕсли;
EndProcedure

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Procedure ИсходныйОбъектПриИзменении(Элемент)
	If Не ValueIsFilled(Объект.ИсходныйОбъект) Then
		УникальныйИдентификаторИсточника="";
	Else
		Try
			УникальныйИдентификаторИсточника = Объект.ИсходныйОбъект.UUID();
		Исключение
			//TODO Убрать это кривое решение проблемы
		EndTry;
	EndIf;
EndProcedure

&НаКлиенте
Procedure РезультатПоискаВыбор(Элемент, ВыбраннаяСтрока, Поле, StandardProcessing)
	StandardProcessing = False;
	ОткрытьОбъектТекущейСтроки();
EndProcedure

&НаКлиенте
Procedure РезультатПоискаПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.РезультатПоиска.CurrentData;
	If ТекДанные = Undefined Then
		ВидимостьКомандыОткрытия = False;
		ВидимостьКомандыПоиска = Ложь;
	Else
		ВидимостьКомандыОткрытия = ТекДанные.МожноОткрыть;
		ВидимостьКомандыПоиска = ТекДанные.СсылочныйТип;
	EndIf;

	Элементы.ТаблицаКонтекстноеМенюОткрытьОбъект.Visible = ВидимостьКомандыОткрытия;
	Элементы.ТаблицаКонтекстноеМенюПоискДляОбъекта.Visible = ВидимостьКомандыПоиска;
EndProcedure

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Procedure НайтиСсылки(Команда)
	ВыполнитьПоискСсылок();
EndProcedure

&НаКлиенте
Procedure ОткрытьОбъект(Команда)
	ОткрытьОбъектТекущейСтроки();
EndProcedure

&НаКлиенте
Procedure ПоискДляОбъекта(Команда)
	ТекДанные = Элементы.РезультатПоиска.CurrentData;
	If ТекДанные = Undefined Then
		Возврат;
	EndIf;
	If Не ТекДанные.СсылочныйТип Then
		Возврат;
	EndIf;

	ПараметрыФормы = New Structure;
	ПараметрыФормы.Вставить("ОбъектПоиска", ТекДанные.НайденныйОбъект);

	ОткрытьФорму("Обработка.UT_ObjectReferencesSearch.Форма", ПараметрыФормы, , New УникальныйИдентификатор);
EndProcedure

&НаКлиенте
Procedure РедактироватьОбъект(Команда)
	ТекДанные = Элементы.РезультатПоиска.CurrentData;
	If ТекДанные = Undefined Then
		Возврат;
	EndIf;

	UT_CommonClient.РедактироватьОбъект(ТекДанные.НайденныйОбъект);
EndProcedure

&НаКлиенте
Procedure РедактироватьИсходныйОбъект(Команда)
	If Не ValueIsFilled(Объект.ИсходныйОбъект) Then
		Возврат;
	EndIf;

	UT_CommonClient.РедактироватьОбъект(Объект.ИсходныйОбъект);
EndProcedure

&НаКлиенте
Procedure ИсходныйОбъектПоСсылке(Команда)
	ОбработчикЗавершения = New NotifyDescription("ВводНавигационнойСсылкиЗавершение", ThisObject);
	ПоказатьВводСтроки(ОбработчикЗавершения, , "Нав. ссылка на объект (e1cib/data/...)");
EndProcedure

&НаКлиенте
Procedure ВводНавигационнойСсылкиЗавершение(РезультатВвода, ДопПараметры) Экспорт
	If РезультатВвода = Неопределено Then
		Возврат;
	EndIf;	
	
	НайденныйОбъект = вНайтиОбъектПоURL(РезультатВвода);
	If Объект.ИсходныйОбъект <> НайденныйОбъект Then
		Объект.ИсходныйОбъект = НайденныйОбъект;
		ИсходныйОбъектПриИзменении(Undefined);
	EndIf;
	
EndProcedure

//@skip-warning
&НаКлиенте
Procedure Подключаемый_ВыполнитьОбщуюКомандуИнструментов(Команда) 
	UT_CommonClient.Подключаемый_ВыполнитьОбщуюКомандуИнструментов(ThisObject, Команда);
EndProcedure

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Procedure ВыполнитьПоискСсылокНаСервере()
	If Не ValueIsFilled(Объект.ИсходныйОбъект) Then
		UT_CommonClientServer.СообщитьПользователю("Не выбран объект, на который необходимо найти ссылки", ,
			"Объект.ИсходныйОбъект");
		Возврат;
	EndIf;

	СоответствиеМожноЛиОткрывать = New Map;
	СоответствиеМожноЛиОткрывать.Insert(0, Ложь); // 0
	СоответствиеМожноЛиОткрывать.Insert(1, Истина); // 1 Константа
	СоответствиеМожноЛиОткрывать.Insert(2, Истина); // 2 Справочник
	СоответствиеМожноЛиОткрывать.Insert(3, Истина); // 3 Документ
	СоответствиеМожноЛиОткрывать.Insert(4, Ложь); // 4 Регистр накопления
	СоответствиеМожноЛиОткрывать.Insert(5, Ложь); // 5 Регистр бухгалтерии
	СоответствиеМожноЛиОткрывать.Insert(6, Ложь); // 6 Регистр расчета
	СоответствиеМожноЛиОткрывать.Insert(7, Истина); // 7 Регистр сведений
	СоответствиеМожноЛиОткрывать.Insert(8, Истина); // 8 Бизнес процесс
	СоответствиеМожноЛиОткрывать.Insert(9, Истина); // 9 Задача
	СоответствиеМожноЛиОткрывать.Insert(11, Истина); // 11 План видов расчета
	СоответствиеМожноЛиОткрывать.Insert(12, Истина); // 12 План счетов
	СоответствиеМожноЛиОткрывать.Insert(13, Истина); // 13 Внешний источник данных набор
	СоответствиеМожноЛиОткрывать.Insert(14, Истина); // 14 Внешний источник данных ссылка
	СоответствиеСсылочныйТип = New Map;
	СоответствиеСсылочныйТип.Insert(0, Ложь); // 0
	СоответствиеСсылочныйТип.Insert(1, Ложь); // 1 Константа
	СоответствиеСсылочныйТип.Insert(2, Истина); // 2 Справочник
	СоответствиеСсылочныйТип.Insert(3, Истина); // 3 Документ
	СоответствиеСсылочныйТип.Insert(4, Ложь); // 4 Регистр накопления
	СоответствиеСсылочныйТип.Insert(5, Ложь); // 5 Регистр бухгалтерии
	СоответствиеСсылочныйТип.Insert(6, Ложь); // 6 Регистр расчета
	СоответствиеСсылочныйТип.Insert(7, Ложь); // 7 Регистр сведений
	СоответствиеСсылочныйТип.Insert(8, Истина); // 8 Бизнес процесс
	СоответствиеСсылочныйТип.Insert(9, Истина); // 9 Задача
	СоответствиеСсылочныйТип.Insert(10, Истина); // 10 План видов характеристик
	СоответствиеСсылочныйТип.Insert(11, Истина); // 11 План видов расчета
	СоответствиеСсылочныйТип.Insert(12, Истина); // 12 План счетов
	СоответствиеСсылочныйТип.Insert(13, Ложь); // 13 Внешний источник данных набор
	СоответствиеСсылочныйТип.Insert(14, Истина); // 14 Внешний источник данных ссылка
	СоответствиеКартинок = New Map;
	СоответствиеКартинок.Insert(0, New Картинка); // 0
	СоответствиеКартинок.Insert(1, БиблиотекаКартинок.Константа); // 1 Константа
	СоответствиеКартинок.Insert(2, БиблиотекаКартинок.Справочник); // 2 Справочник
	СоответствиеКартинок.Insert(3, БиблиотекаКартинок.Документ); // 3 Документ
	СоответствиеКартинок.Insert(4, БиблиотекаКартинок.РегистрНакопления); // 4 Регистр накопления
	СоответствиеКартинок.Insert(5, БиблиотекаКартинок.РегистрБухгалтерии); // 5 Регистр бухгалтерии
	СоответствиеКартинок.Insert(6, БиблиотекаКартинок.РегистрРасчета); // 6 Регистр расчета
	СоответствиеКартинок.Insert(7, БиблиотекаКартинок.РегистрСведений); // 7 Регистр сведений
	СоответствиеКартинок.Insert(8, БиблиотекаКартинок.БизнесПроцесс); // 8 Бизнес процесс
	СоответствиеКартинок.Insert(9, БиблиотекаКартинок.Задача); // 9 Задача
	СоответствиеКартинок.Insert(10, БиблиотекаКартинок.ПланВидовХарактеристик); // 10 План видов характеристик
	СоответствиеКартинок.Insert(11, БиблиотекаКартинок.ПланВидовРасчета); // 11 План видов расчета
	СоответствиеКартинок.Insert(12, БиблиотекаКартинок.ПланСчетов); // 12 План счетов
	СоответствиеКартинок.Insert(13, БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица); // 13 Внешний источник данных набор
	СоответствиеКартинок.Insert(14, БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица); // 14 Внешний источник данных ссылка
	МассивПоиска = New Array;
	МассивПоиска.Добавить(Объект.ИсходныйОбъект);

	ТаблицаСсылок = НайтиПоСсылкам(МассивПоиска);

	РезультатПоиска.Очистить();
	Объект.КоличествоНайденных = ТаблицаСсылок.Count();

	Первый = Истина;
	Для Каждого СтрокаНайденнного Из ТаблицаСсылок Цикл
	// 0 - find object
	// 1 - found object
	// 2 - metadata object
		БазовыйТипЧислом = ТипМетаданныхЧислом(СтрокаНайденнного.Metadata);

		ПредставлениеНайденного = ПредставлениеНайденногоОбъекта(БазовыйТипЧислом, СтрокаНайденнного.Metadata,
			СтрокаНайденнного.Data) + " (" + СтрокаНайденнного.Metadata.ПолноеИмя() + ")";

		НоваяСтрока = РезультатПоиска.Добавить();
		НоваяСтрока.Ссылка = СтрокаНайденнного.Ref;
		НоваяСтрока.ПредставлениеОбъекта = ПредставлениеНайденного;
		НоваяСтрока.НайденныйОбъект = СтрокаНайденнного.Data;
		НоваяСтрока.Картинка = СоответствиеКартинок[БазовыйТипЧислом];
		НоваяСтрока.МожноОткрыть = СоответствиеМожноЛиОткрывать[БазовыйТипЧислом];
		НоваяСтрока.СсылочныйТип = СоответствиеСсылочныйТип[БазовыйТипЧислом];
		If НоваяСтрока.СсылочныйТип Then
			НоваяСтрока.УникальныйИдентификатор = НоваяСтрока.НайденныйОбъект.UUID();
		EndIf;

		If Первый Then

			Элементы.РезультатПоиска.ТекущаяСтрока = НоваяСтрока.GetID();
			Первый = Ложь;

		EndIf;
		;

	КонецЦикла;

EndProcedure

&НаКлиенте
Procedure ОткрытьОбъектТекущейСтроки()
	ТекДанные = Элементы.РезультатПоиска.CurrentData;
	If ТекДанные = Undefined Then
		Возврат;
	EndIf;
	If Не ТекДанные.МожноОткрыть Then
		Возврат;
	EndIf;

	ПоказатьЗначение( , ТекДанные.НайденныйОбъект);

EndProcedure

&НаКлиенте
Procedure ВыполнитьПоискСсылок()
	If Не ValueIsFilled(Объект.ИсходныйОбъект) Then
		UT_CommonClientServer.СообщитьПользователю("Не выбран объект, на который необходимо найти ссылки", ,
			"Объект.ИсходныйОбъект");
		Возврат;
	EndIf;

	Состояние("Выполняется поиск ссылок на объект", , , БиблиотекаКартинок.УправлениеПоиском);
	ВыполнитьПоискСсылокНаСервере();
	Состояние("Поиск ссылок на объект завершен", , , БиблиотекаКартинок.УправлениеПоиском);

	ЭтотОбъект.ТекущийЭлемент = Элементы.РезультатПоиска;

EndProcedure

&НаСервереБезКонтекста
Function ПредставлениеНайденногоОбъекта(БазовыйТипЧислом, МетаданныеОбъекта, НайденныйОбъект)

	Представление = TrimAll(НайденныйОбъект);
	If БазовыйТипЧислом = 2 Или БазовыйТипЧислом = 3 Или БазовыйТипЧислом = 8 Или БазовыйТипЧислом = 9
		Или БазовыйТипЧислом = 10 Или БазовыйТипЧислом = 11 Или БазовыйТипЧислом = 12 Или БазовыйТипЧислом = 14 Then

	ИначеЕсли БазовыйТипЧислом = 4 Или БазовыйТипЧислом = 5 Или БазовыйТипЧислом = 6 Или БазовыйТипЧислом = 7 Then

		Представление = "";
		If МетаданныеОбъекта.InformationRegisterPeriodicity
			<> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Then

			Представление = Строка(НайденныйОбъект.Период);

		EndIf;

		If МетаданныеОбъекта.WriteMode = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Then

			Представление = ?(СтрДлина(Представление) = 0, "", Представление + "; ") + Строка(
				НайденныйОбъект.Регистратор);

		EndIf;

		Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл

			Представление = ?(СтрДлина(Представление) = 0, "", Представление + "; ") + Строка(
				НайденныйОбъект[Измерение.Имя]);

		КонецЦикла;

	ИначеЕсли БазовыйТипЧислом = 13 Then

		Представление = "";
		Для Каждого Измерение Из МетаданныеОбъекта.KeyFields Цикл

			Представление = ?(СтрДлина(Представление) = 0, "", Представление + "; ") + Строка(
				НайденныйОбъект[Измерение.Имя]);

		КонецЦикла;
	EndIf;

	Возврат Представление;

EndFunction

&НаСервереБезКонтекста
Function ТипМетаданныхЧислом(МетаданныеОбъекта)

	ТипМетаданных = 0;
	If Metadata.Константы.Содержит(МетаданныеОбъекта) Then

		ТипМетаданных = 1;
	ИначеЕсли Metadata.Справочники.Содержит(МетаданныеОбъекта) Then

		ТипМетаданных = 2;
	ИначеЕсли Metadata.Документы.Содержит(МетаданныеОбъекта) Then

		ТипМетаданных = 3;
	ИначеЕсли Metadata.РегистрыНакопления.Содержит(МетаданныеОбъекта) Then

		ТипМетаданных = 4;
	ИначеЕсли Metadata.РегистрыБухгалтерии.Содержит(МетаданныеОбъекта) Then

		ТипМетаданных = 5;
	ИначеЕсли Metadata.РегистрыРасчета.Содержит(МетаданныеОбъекта) Then

		ТипМетаданных = 6;
	ИначеЕсли Metadata.РегистрыСведений.Содержит(МетаданныеОбъекта) Then

		ТипМетаданных = 7;
	ИначеЕсли Metadata.БизнесПроцессы.Содержит(МетаданныеОбъекта) Then

		ТипМетаданных = 8;
	ИначеЕсли Metadata.Задачи.Содержит(МетаданныеОбъекта) Then

		ТипМетаданных = 9;
	ИначеЕсли Metadata.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Then

		ТипМетаданных = 10;
	ИначеЕсли Metadata.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Then

		ТипМетаданных = 11;
	ИначеЕсли Metadata.ПланыСчетов.Содержит(МетаданныеОбъекта) Then

		ТипМетаданных = 12;
	Else
		Для Каждого ВнешнийИсточник Из Metadata.ВнешниеИсточникиДанных Цикл

			If ВнешнийИсточник.Таблицы.Содержит(МетаданныеОбъекта) Then

				If МетаданныеОбъекта.TableDataType
					= Metadata.СвойстваОбъектов.ТипДанныхТаблицыВнешнегоИсточникаДанных.ОбъектныеДанные Then

					ТипМетаданных = 14; // object table
				Else

					ТипМетаданных = 13; // non-object table
				EndIf;
				Прервать;
			EndIf;
		КонецЦикла;
	EndIf;

	Return ТипМетаданных;

EndFunction

//TODO Необходимо перенести эту функцию в общий модуль. Сейчас она просто скопирована из УИ_РедакторРеквизитовОбъекта.ФормаОбъекта
&НаСервереБезКонтекста
Function вНайтиОбъектПоURL(Знач URL)
	Поз1 = Find(URL, "e1cib/data/");
	Поз2 = Find(URL, "?ref=");

	If Поз1 = 0 Или Поз2 = 0 Then
		Возврат Undefined;
	EndIf;

	Try
		ИмяТипа = Mid(URL, Поз1 + 11, Поз2 - Поз1 - 11);
		ШаблонЗначения = ValueToStringInternal(PredefinedValue(ИмяТипа + ".EmptyRef"));
		ЗначениеСсылки = StrReplace(ШаблонЗначения, "00000000000000000000000000000000", Mid(URL, Поз2 + 5));
		Ссылка = ValueFromStringInternal(ЗначениеСсылки);
	Исключение
		Возврат Undefined;
	EndTry;

	Возврат Ссылка;
EndFunction

#КонецОбласти