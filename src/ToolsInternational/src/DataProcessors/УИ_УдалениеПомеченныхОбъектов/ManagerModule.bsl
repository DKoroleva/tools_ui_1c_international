#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then

#Region Private

////////////////////////////////////////////////////////////////////////////////
// Interactive deletion of marked objects.

// Deletes marked objects. It is used upon deleting objects in a background job interactively.
//
// Parameters:
//   ExecutionParameters - Structure - parameters required for deletion.
//   StorageAddress - String - a temporary storage address.
//
Procedure DeleteMarkedObjectsInteractively(ExecutionParameters, StorageAddress) Export
	DeleteMarkedObjects(ExecutionParameters);
	PutToTempStorage(ExtractResult(ExecutionParameters), StorageAddress);
EndProcedure

////////////////////////////////////////////////////////////////////////////////
// Удаление помеченных из регламентного задания.

// Удаляет помеченные объекты из регламентного задания.
Procedure УдалитьПомеченныеОбъектыИзРегламентногоЗадания() Export

	ExecutionParameters = New Structure;
	DeleteMarkedObjects(ExecutionParameters);

EndProcedure

////////////////////////////////////////////////////////////////////////////////
// Инициализация и запуск.

// Основная механика удаления помеченных объектов.
Procedure DeleteMarkedObjects(ExecutionParameters)

	If Not UT_Users.ЭтоПолноправныйПользователь() Then
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для выполнения операции.'");
	EndIf;

	ИнициализироватьПараметры(ПараметрыВыполнения);

	If ПараметрыВыполнения.ИскатьПомеченные Then
		ПолучитьПомеченныеНаУдаление(ПараметрыВыполнения);
	EndIf;

	If Not ПараметрыВыполнения.УдалятьПомеченные Then
		Return;
	EndIf;

	If ПараметрыВыполнения.Интерактивное И ПараметрыВыполнения.ВсеПомеченныеНаУдаление.Количество() = 0 Then
		Return; // Не удалять технологические объекты при интерактивном запуске если нет пользовательских объектов.
	EndIf;

	If ПараметрыВыполнения.Монопольно Then
		УдалитьПомеченныеОбъектыМонопольно(ПараметрыВыполнения);
	Else // Не монопольно.
		УдалитьПомеченныеОбъектыКонкурентно(ПараметрыВыполнения);
	EndIf;

EndProcedure

////////////////////////////////////////////////////////////////////////////////
// Конкурентное удаление помеченных.

// Основная механика.
Procedure УдалитьПомеченныеОбъектыКонкурентно(ПараметрыВыполнения)
	УстановитьПривилегированныйРежим(Истина);
	
	// Удаление технологических объектов (которые создавались и помечались на удаление без участия пользователя).
	If ПараметрыВыполнения.ТехнологическиеОбъекты <> Неопределено Then
		ОтметитьНачалоОбходаКоллекции(ПараметрыВыполнения, "ТехнологическиеОбъекты");
		Для Каждого Ссылка Из ПараметрыВыполнения.ТехнологическиеОбъекты Цикл
			УдалитьСсылку(ПараметрыВыполнения, Ссылка); // Для технологических объектов результат не выводится.
			ОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, "ТехнологическиеОбъекты");
		КонецЦикла;
	EndIf;
	
	// Удаление помеченных на удаление.
	ОтметитьНачалоОбходаКоллекции(ПараметрыВыполнения, "ПользовательскиеОбъекты");
	Для Каждого Ссылка Из ПараметрыВыполнения.ПользовательскиеОбъекты Цикл
		Результат = УдалитьСсылку(ПараметрыВыполнения, Ссылка);
		ЗарегистрироватьРезультатУдаления(ПараметрыВыполнения, Ссылка, Результат, "ПользовательскиеОбъекты");
		ОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, "ПользовательскиеОбъекты");
	КонецЦикла;
	
	// Удаление цепочек (линейно связанных объектов).
	ОтметитьНачалоОбходаКоллекции(ПараметрыВыполнения, "ПовторноУдаляемые");
	Пока ПараметрыВыполнения.ПовторноУдаляемые.Количество() > 0 Цикл
		Ссылка = ПараметрыВыполнения.ПовторноУдаляемые[0];
		ПараметрыВыполнения.ПовторноУдаляемые.Delete(0);

		Результат = УдалитьСсылку(ПараметрыВыполнения, Ссылка);

		ЗарегистрироватьРезультатУдаления(ПараметрыВыполнения, Ссылка, Результат, "ПовторноУдаляемые");
		ОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, "ПовторноУдаляемые");
	КонецЦикла;
	
	// Удаление циклов (кольцевых связей объектов).
	УдалитьОставшиесяОбъектыВОднойТранзакции(ПараметрыВыполнения);
	
	// Очистка от "спама".
	ОчиститьСвязиОтИсключенийПоискаСсылок(ПараметрыВыполнения);

EndProcedure

// Удаление одиночного объекта с контролем результата и откатом транзакции в случае неудачи.
Function УдалитьСсылку(ПараметрыВыполнения, Ссылка)
	Результат = New Structure; // Результат обрабатывается в ЗарегистрироватьРезультатУдаления().
	Результат.Вставить("Успех", Неопределено);
	Результат.Вставить("ИнформацияОбОшибке", Неопределено);
	Результат.Вставить("ПрепятствующиеУдалению", Неопределено);
	Результат.Вставить("ВложенныеИПодчиненныеОбъекты", New Массив);
	Результат.Вставить("Количество", 0);
	Результат.Вставить("Сообщения", Неопределено);

	Информация = СформироватьИнформациюОТипах(ПараметрыВыполнения, ТипЗнч(Ссылка));

	НачатьТранзакцию();
	Попытка
		ПопробоватьУдалитьСсылку(ПараметрыВыполнения, Ссылка, Информация, Результат);
		If Результат.Успех Then
			ЗафиксироватьТранзакцию();
		Else
			ОтменитьТранзакцию();
		EndIf;
	Исключение
		ОтменитьТранзакцию();
		Результат.Успех = Ложь;
		Результат.ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	Результат.Сообщения = UT_TimeConsumingOperations.СообщенияПользователю(Истина);

	If Not Результат.Успех Then
		ЗаписатьПредупреждение(Ссылка, Результат.ИнформацияОбОшибке);
	EndIf;

	If ТипЗнч(Результат.ПрепятствующиеУдалению) = Тип("ТаблицаЗначений") Then
		Результат.ПрепятствующиеУдалению.Колонки[0].Имя = "УдаляемыйСсылка";
		Результат.ПрепятствующиеУдалению.Колонки[1].Имя = "ОбнаруженныйСсылка";
		Результат.ПрепятствующиеУдалению.Колонки[2].Имя = "ОбнаруженныйМетаданные";
		Для Каждого ОбнаруженныйСсылка Из Результат.ВложенныеИПодчиненныеОбъекты Цикл
			СтрокаТаблицы = Результат.ПрепятствующиеУдалению.Добавить();
			СтрокаТаблицы.УдаляемыйСсылка        = Ссылка;
			СтрокаТаблицы.ОбнаруженныйСсылка     = ОбнаруженныйСсылка;
		КонецЦикла;
	EndIf;

	Return Результат;
EndFunction

// Механика удаления объекта и поиска ссылок.
Procedure ПопробоватьУдалитьСсылку(ПараметрыВыполнения, Ссылка, Информация, Результат)
	Блокировка = New БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(Информация.ПолноеИмя);
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	Блокировка.Заблокировать();

	Объект = Ссылка.ПолучитьОбъект();
	If Объект = Неопределено Then
		Результат.Успех = Истина; // Объект уже удален.
		Return;
	EndIf;
	If Объект.ПометкаУдаления <> Истина Then
		Результат.Успех = Ложь;
		Результат.ИнформацияОбОшибке = НСтр("ru = 'Объект не помечен на удаление.'");
		Return;
	EndIf;

	НайтиВложенныеИПодчиненныеОбъекты(ПараметрыВыполнения, Ссылка, Информация, Результат);

	Объект.Delete();

	НайтиПрепятствующиеУдалению(ПараметрыВыполнения, Ссылка, Информация, Результат);

	If Результат.Количество = 0 Then
		Результат.Успех = Истина;
	Else
		Результат.Успех = Ложь;
		Результат.ИнформацияОбОшибке = НСтр("ru = 'Объект используется в других объектах программы.'");
	EndIf;
EndProcedure

// Поиск ссылок вложенных и подчиненных (иерархия и связь по владельцу). Выполняется до удаления.
Procedure НайтиВложенныеИПодчиненныеОбъекты(ПараметрыВыполнения, Ссылка, Информация, Результат)

	If Информация.Иерархический Then
		Запрос = New Запрос(Информация.ТекстЗапросаПоИерархии);
		Запрос.УстановитьПараметр("УдаляемыйСсылка", Ссылка);
		ВложенныеОбъекты = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТаблицы Из ВложенныеОбъекты Цикл
			Результат.ВложенныеИПодчиненныеОбъекты.Добавить(СтрокаТаблицы.Ссылка);
		КонецЦикла;
		Результат.Количество = Результат.Количество + ВложенныеОбъекты.Количество();
	EndIf;

	If Информация.ЕстьПодчиненные Then
		Запрос = New Запрос(Информация.ТекстЗапросаПоПодчиненным);
		Запрос.УстановитьПараметр("УдаляемыйСсылка", Ссылка);
		ПодчиненныеОбъекты = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТаблицы Из ПодчиненныеОбъекты Цикл
			Результат.ВложенныеИПодчиненныеОбъекты.Добавить(СтрокаТаблицы.Ссылка);
		КонецЦикла;
		Результат.Количество = Результат.Количество + ПодчиненныеОбъекты.Количество();
	EndIf;

EndProcedure

// Поиск ссылок путем сканирования всех таблиц. Выполняется после удаления.
Procedure НайтиПрепятствующиеУдалению(ПараметрыВыполнения, Ссылка, Информация, Результат)

	ПоискСсылок = New Массив;
	ПоискСсылок.Добавить(Ссылка);

	ПрепятствующиеУдалению = НайтиПоСсылкам(ПоискСсылок);
	
	// Пропуск ссылок из границ последовательности.
	Количество = ПрепятствующиеУдалению.Количество();
	ИмяКолонки = ПрепятствующиеУдалению.Колонки[1].Имя;
	Для Номер = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Номер;
		СтрокаТаблицы = ПрепятствующиеУдалению[ОбратныйИндекс];
		ПрепятствующийСсылка = СтрокаТаблицы[ИмяКолонки];
		If ПрепятствующийСсылка = Ссылка Или ДокументУжеУдален(ПараметрыВыполнения, ПрепятствующийСсылка) Then
			ПрепятствующиеУдалению.Delete(СтрокаТаблицы);
		EndIf;
	КонецЦикла;
	
	// Регистрация результата.
	Результат.ПрепятствующиеУдалению = ПрепятствующиеУдалению;
	Результат.Количество = Результат.Количество + Результат.ПрепятствующиеУдалению.Количество();

EndProcedure

// Поиск ссылки документа в базе данных.
Function ДокументУжеУдален(ПараметрыВыполнения, Ссылка)
	If Ссылка = Неопределено Then
		Return Ложь; // Не документ.
	EndIf;
	Информация = СформироватьИнформациюОТипах(ПараметрыВыполнения, ТипЗнч(Ссылка));
	If Информация.Вид <> "ДОКУМЕНТ" Then
		Return Ложь; // Не документ.
	EndIf;
	Запрос = New Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ " + Информация.ПолноеИмя + " Где Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Return Запрос.Выполнить().Пустой();
EndFunction

// Удаление циклов (кольцевых связей объектов).
Procedure УдалитьОставшиесяОбъектыВОднойТранзакции(ПараметрыВыполнения)
	
	// 1. Объекты, которые невозможно удалить, получаются путем определения неразрешимых связей.
	ОбъектыКоторыеНевозможноУдалить = New Массив;
	ВложенныеНеразрешимыеСвязи = New Массив;

	Для Каждого Препятствующий Из ПараметрыВыполнения.ПрепятствующиеУдалению Цикл
		// 1.1. Критерием для определения неразрешимых связей является тот факт, что объект, препятствующий удалению, 
		// не является регистром. В случае с регистрами предполагаем, что записи регистра будут удалены автоматически,
		// при удалении объекта в его ведущем измерении.
		If Препятствующий.ОбнаруженныйТип <> Тип("Строка") И Not UT_Common.IsRefTypeObject(
			Метаданные.НайтиПоТипу(Препятствующий.ОбнаруженныйТип)) Then
			Продолжить;
		EndIf;
		// 1.2. А также то, что объект, препятствующий удалению, не отмечен для удаления.
		If ПараметрыВыполнения.НеУдаленные.Найти(Препятствующий.ОбнаруженныйСсылка) = Неопределено
			И ОбъектыКоторыеНевозможноУдалить.Найти(Препятствующий.УдаляемыйСсылка) = Неопределено Then
			ОбъектыКоторыеНевозможноУдалить.Добавить(Препятствующий.УдаляемыйСсылка);
			Найденные = ПараметрыВыполнения.ПрепятствующиеУдалению.НайтиСтроки(New Structure("ОбнаруженныйСсылка",
				Препятствующий.УдаляемыйСсылка));
			ВложенныеНеразрешимыеСвязи.Добавить(Найденные);
		EndIf;
	КонецЦикла;
	
	// 1.3. Далее при помощи массива ВложенныеНеразрешимыеСвязи
	// получаются неразрешимые подчиненные - "связи связей", "связи связей связей" и т.д...
	Индекс = 0;
	Пока Индекс < ВложенныеНеразрешимыеСвязи.Количество() Цикл
		Найденные = ВложенныеНеразрешимыеСвязи[Индекс];
		Индекс = Индекс + 1;
		Для Каждого Препятствующий Из Найденные Цикл
			If ОбъектыКоторыеНевозможноУдалить.Найти(Препятствующий.УдаляемыйСсылка) = Неопределено Then
				ОбъектыКоторыеНевозможноУдалить.Добавить(Препятствующий.УдаляемыйСсылка);
				Найденные = ПараметрыВыполнения.ПрепятствующиеУдалению.НайтиСтроки(
					New Structure("ОбнаруженныйСсылка", Препятствующий.УдаляемыйСсылка));
				ВложенныеНеразрешимыеСвязи.Добавить(Найденные);
			EndIf;
		КонецЦикла;
	КонецЦикла;
	
	// 2. Объекты, которые можно попробовать удалить в одной транзакции.
	//    = Массив удаляемых - Массив объектов, которые невозможно удалить.
	УдаляемыеОбъекты = New Массив;
	Для Каждого НеУдаленныйОбъект Из ПараметрыВыполнения.НеУдаленные Цикл
		If ОбъектыКоторыеНевозможноУдалить.Найти(НеУдаленныйОбъект) = Неопределено Then
			УдаляемыеОбъекты.Добавить(НеУдаленныйОбъект);
		EndIf;
	КонецЦикла;

	Количество = УдаляемыеОбъекты.Количество();
	If Количество = 0 Then
		Return; // Нет объектов для удаления.
	EndIf;
	
	// 3. Включение всех объектов в одну транзакцию и попытка удалить.
	Успех = Ложь;
	НачатьТранзакцию();
	Попытка
		Для Номер = 1 По Количество Цикл
			ОбратныйИндекс = Количество - Номер;
			НеУдаленныйОбъект = УдаляемыеОбъекты[ОбратныйИндекс];

			Информация = СформироватьИнформациюОТипах(ПараметрыВыполнения, ТипЗнч(НеУдаленныйОбъект));

			Блокировка = New БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Информация.ПолноеИмя);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", НеУдаленныйОбъект);
			Блокировка.Заблокировать();

			Объект = НеУдаленныйОбъект.ПолучитьОбъект();
			If Объект = Неопределено Then // Объект уже удален.
				Продолжить;
			EndIf;
			If Объект.ПометкаУдаления <> Истина Then
				УдаляемыеОбъекты.Delete(ОбратныйИндекс); // Объект уже не помечен на удаление.
				Продолжить;
			EndIf;

			Объект.Delete();
		КонецЦикла;
		НеУдаленныйОбъект = Неопределено;

		If УдаляемыеОбъекты.Количество() > 0 Then
			ПрепятствующиеУдалению = НайтиПоСсылкам(УдаляемыеОбъекты);

			ИмяКолонки = ПрепятствующиеУдалению.Колонки[1].Имя;
			Для Каждого НеУдаленныйОбъект Из УдаляемыеОбъекты Цикл
				ПоискНеПрепятствующих = New Structure(ИмяКолонки, НеУдаленныйОбъект);
				НеПрепятствующие = ПрепятствующиеУдалению.НайтиСтроки(ПоискНеПрепятствующих);
				Для Каждого Препятствующий Из НеПрепятствующие Цикл
					ПрепятствующиеУдалению.Delete(Препятствующий);
				КонецЦикла;
			КонецЦикла;

			If ПрепятствующиеУдалению.Количество() = 0 Then
				Успех = Истина;
			EndIf;
		EndIf;

		If Успех Then
			ЗафиксироватьТранзакцию();
		Else
			ОтменитьТранзакцию();
		EndIf;

	Исключение
		ОтменитьТранзакцию();
		Успех = Ложь;
		ЗаписатьПредупреждение(НеУдаленныйОбъект, ИнформацияОбОшибке());
	КонецПопытки;
	
	// 4. Регистрация результата (если успех).
	If Успех Then
		Для Каждого НеУдаленныйОбъект Из УдаляемыеОбъекты Цикл
			// Регистрация ссылки в коллекции удаленных.
			If ПараметрыВыполнения.Удаленные.Найти(НеУдаленныйОбъект) = Неопределено Then
				ПараметрыВыполнения.Удаленные.Добавить(НеУдаленныйОбъект);
			EndIf;
			
			// Удаление ссылки из коллекции не удаленных.
			Индекс = ПараметрыВыполнения.НеУдаленные.Найти(НеУдаленныйОбъект);
			If Индекс <> Неопределено Then
				ПараметрыВыполнения.НеУдаленные.Delete(Индекс);
			EndIf;
			
			// Очистка информации о связях "от" удаленных объектов.
			Найденные = ПараметрыВыполнения.ПрепятствующиеУдалению.НайтиСтроки(New Structure("УдаляемыйСсылка",
				НеУдаленныйОбъект));
			Для Каждого Препятствующий Из Найденные Цикл
				ПараметрыВыполнения.ПрепятствующиеУдалению.Delete(Препятствующий);
			КонецЦикла;
			
			// Очистка информации о связях "к" удаленным объектам.
			Найденные = ПараметрыВыполнения.ПрепятствующиеУдалению.НайтиСтроки(New Structure("ОбнаруженныйСсылка",
				НеУдаленныйОбъект));
			Для Каждого Препятствующий Из Найденные Цикл
				ПараметрыВыполнения.ПрепятствующиеУдалению.Delete(Препятствующий);
			КонецЦикла;
		КонецЦикла;
	EndIf;
EndProcedure

// Очистка причин неудаления объектов от исключений поиска ссылок.
//   Применяется при оперативном удалении помеченных для того, чтобы удалить из результата "дублирующие" связи.
Procedure ОчиститьСвязиОтИсключенийПоискаСсылок(ПараметрыВыполнения)
	If Not ПараметрыВыполнения.Свойство("ИсключенияПоискаСсылок") Then
		ПараметрыВыполнения.Вставить("ИсключенияПоискаСсылок", UT_Common.ИсключенияПоискаСсылок());
	EndIf;
	If Not ПараметрыВыполнения.Свойство("ИсключающиеПравила") Then
		ПараметрыВыполнения.Вставить("ИсключающиеПравила", New Map); // Кэш правил исключений поиска.
	EndIf;

	ОбъектыСНеИсключениями = New Map;
	ОбъектыТолькоСИсключениями = New Map;
	
	// Определение "спама".
	ПрепятствующиеУдалению = ПараметрыВыполнения.ПрепятствующиеУдалению;
	ПрепятствующиеУдалению.Колонки.Добавить("ЭтоИсключение", New ОписаниеТипов("Булево"));
	Для Каждого Причина Из ПрепятствующиеУдалению Цикл
		If Причина.ОбнаруженныйТип <> Тип("Строка") Then
			ОбнаруженныйМетаданные = Метаданные.НайтиПоТипу(Причина.ОбнаруженныйТип);
			Причина.ЭтоИсключение = СвязьВИсключенияхПоискаСсылок(ПараметрыВыполнения, ОбнаруженныйМетаданные, Причина);
		EndIf;
		If Причина.ЭтоИсключение Then
			If ОбъектыСНеИсключениями[Причина.УдаляемыйСсылка] = Неопределено Then
				ОбъектыТолькоСИсключениями.Вставить(Причина.УдаляемыйСсылка, Истина);
			EndIf;
		Else
			ОбъектыСНеИсключениями.Вставить(Причина.УдаляемыйСсылка, Истина);
			ОбъектыТолькоСИсключениями.Delete(Причина.УдаляемыйСсылка);
		EndIf;
	КонецЦикла;
	
	// Если кроме "спама" ничего не осталось,
	// то это ситуация, когда разработчик забыл добавить авто-очистку при удалении объекта.
	// В таких редких случаях вместо вывода пустого списка причин, можно вывести "спам".
	Для Каждого КлючИЗначение Из ОбъектыТолькоСИсключениями Цикл
		Найденные = ПрепятствующиеУдалению.НайтиСтроки(New Structure("УдаляемыйСсылка", КлючИЗначение.Ключ));
		Для Каждого Причина Из Найденные Цикл
			Причина.ЭтоИсключение = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	// Удаление "спама".
	Найденные = ПрепятствующиеУдалению.НайтиСтроки(New Structure("ЭтоИсключение", Истина));
	Для Каждого Причина Из Найденные Цикл
		ПрепятствующиеУдалению.Delete(Причина);
	КонецЦикла;

	ПрепятствующиеУдалению.Колонки.Delete("ЭтоИсключение");
	ПараметрыВыполнения.Delete("ИсключенияПоискаСсылок");
	ПараметрыВыполнения.Delete("ИсключающиеПравила");
EndProcedure

// Регистрация результата удаления и заполнение коллекции ПовторноУдаляемые.
Procedure ЗарегистрироватьРезультатУдаления(ПараметрыВыполнения, Ссылка, Результат, ИмяКоллекции)
	// Результат формируется в УдалитьСсылку().
	If Результат.Успех Then
		// Регистрация ссылки в коллекции удаленных.
		ПараметрыВыполнения.Удаленные.Добавить(Ссылка);
		
		// Исключение удаленного объекта из причин неудаления других объектов. Поиск.
		НеактуальныеПричины = ПараметрыВыполнения.ПрепятствующиеУдалению.НайтиСтроки(
			New Structure("ОбнаруженныйСсылка", Ссылка));
		Для Каждого Причина Из НеактуальныеПричины Цикл
			// Удаление причины неудаления другого объекта.
			УдаляемыйСсылка = Причина.УдаляемыйСсылка;
			ПараметрыВыполнения.ПрепятствующиеУдалению.Delete(Причина);
			// Поиск других причин неудаления другого объекта.
			If ПараметрыВыполнения.ПрепятствующиеУдалению.Найти(УдаляемыйСсылка, "УдаляемыйСсылка") = Неопределено Then
				// Устранены все причины неудаления другого объекта.
				// Регистрация другого объекта для повторного удаления.
				ПараметрыВыполнения.ПовторноУдаляемые.Добавить(УдаляемыйСсылка);
				If ИмяКоллекции = "ПовторноУдаляемые" И ПараметрыВыполнения.Интерактивное Then
					ПараметрыВыполнения.Всего = ПараметрыВыполнения.Всего + 1;
				EndIf;
				// Очистка записи о другом объекте из коллекции "НеУдаленные".
				Индекс = ПараметрыВыполнения.НеУдаленные.Найти(УдаляемыйСсылка);
				If Индекс <> Неопределено Then
					ПараметрыВыполнения.НеУдаленные.Delete(Индекс);
				EndIf;
			EndIf;
		КонецЦикла;

	Else // Не успешно.

		ПараметрыВыполнения.НеУдаленные.Добавить(Ссылка);

		If ТипЗнч(Результат.ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Или Результат.ПрепятствующиеУдалению
			= Неопределено Then // Текст ошибки
			If ТипЗнч(Результат.ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Then
				ТекстОшибки = КраткоеПредставлениеОшибки(Результат.ИнформацияОбОшибке);
				Подробно    = ПодробноеПредставлениеОшибки(Результат.ИнформацияОбОшибке);
			Else
				ТекстОшибки = Результат.ИнформацияОбОшибке;
				Подробно    = "";
			EndIf;
			Для Каждого СообщениеОтОбъекта Из Результат.Сообщения Цикл
				ТекстОшибки = СокрП(ТекстОшибки + Символы.ПС + Символы.ПС + СокрЛ(СообщениеОтОбъекта.Текст));
				Подробно    = СокрП(Подробно + Символы.ПС + Символы.ПС + СокрЛ(СообщениеОтОбъекта.Текст));
			КонецЦикла;
			Причина = ПараметрыВыполнения.ПрепятствующиеУдалению.Добавить();
			Причина.УдаляемыйСсылка    = Ссылка;
			Причина.УдаляемыйТип       = ТипЗнч(Причина.УдаляемыйСсылка);
			Причина.ОбнаруженныйСсылка = ТекстОшибки;
			Причина.ОбнаруженныйТип    = Тип("Строка");
			Причина.Подробно           = Подробно;
			СформироватьИнформациюОТипах(ПараметрыВыполнения, Причина.УдаляемыйТип);
		Else // Регистрация связей (причин не удаления) для вывода пользователю.
			Для Каждого СтрокаТаблицы Из Результат.ПрепятствующиеУдалению Цикл
				ЗаписатьПричинуВРезультат(ПараметрыВыполнения, СтрокаТаблицы);
			КонецЦикла;
		EndIf;

	EndIf; // Результат.Успех.
EndProcedure

////////////////////////////////////////////////////////////////////////////////
// Монопольное удаление помеченных.

// Основная механика удаления помеченных объектов.
Procedure УдалитьПомеченныеОбъектыМонопольно(ПараметрыВыполнения)

	If Not ПараметрыВыполнения.Свойство("ИсключенияПоискаСсылок") Then
		ПараметрыВыполнения.Вставить("ИсключенияПоискаСсылок", UT_Common.RefSearchExclusions());
	EndIf;
	If Not ПараметрыВыполнения.Свойство("ИсключающиеПравила") Then
		ПараметрыВыполнения.Вставить("ИсключающиеПравила", New Map); // Кэш правил исключений поиска.
	EndIf;

	УдаляемыеОбъекты = ПараметрыВыполнения.ВсеПомеченныеНаУдаление;

	Пока УдаляемыеОбъекты.Количество() > 0 Цикл

		ОтметитьНачалоОбходаКоллекции(ПараметрыВыполнения, "МонопольноеУдаление");

		ПрепятствующиеУдалению = New ТаблицаЗначений;
		
		// Попытка удалить с контролем ссылочной целостности.
		УстановитьПривилегированныйРежим(Истина);
		УдалитьОбъекты(УдаляемыеОбъекты, Истина, ПрепятствующиеУдалению);
		УстановитьПривилегированныйРежим(Ложь);
		If ПрепятствующиеУдалению.Колонки.Количество() < 3 Then
			ВызватьИсключение НСтр("ru = 'Не удалось выполнить удаление объектов.'");
		EndIf;
		
		// Назначение имен колонок для таблицы конфликтов, возникших при удалении.
		ПрепятствующиеУдалению.Колонки[0].Имя = "УдаляемыйСсылка";
		ПрепятствующиеУдалению.Колонки[1].Имя = "ОбнаруженныйСсылка";
		ПрепятствующиеУдалению.Колонки[2].Имя = "ОбнаруженныйМетаданные";

		ВсеСвязиВИсключениях = Истина;
		
		// Анализ причин не удаления (мест использования помеченных на удаление).
		ОтметитьНачалоОбходаКоллекции(ПараметрыВыполнения, "ПрепятствующиеУдалению", ПрепятствующиеУдалению);
		Для Каждого СтрокаТаблицы Из ПрепятствующиеУдалению Цикл
			ОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, "ПрепятствующиеУдалению");
			
			// Проверка исключающих правил.
			If СвязьВИсключенияхПоискаСсылок(ПараметрыВыполнения, СтрокаТаблицы.ОбнаруженныйМетаданные,
				СтрокаТаблицы) Then
				Продолжить; // Связь не препятствует удалению.
			EndIf;
			
			// Невозможно удалить объект (мешает обнаруженная ссылка или запись регистра).
			ВсеСвязиВИсключениях = Ложь;
			
			// Сокращение удаляемых объектов.
			Индекс = УдаляемыеОбъекты.Найти(СтрокаТаблицы.УдаляемыйСсылка);
			If Индекс <> Неопределено Then
				УдаляемыеОбъекты.Delete(Индекс);
			EndIf;
			
			// Регистрация связи для вывода пользователю.
			ЗаписатьПричинуВРезультат(ПараметрыВыполнения, СтрокаТаблицы);
		КонецЦикла;
		
		// Удаление без контроля, если все связи в исключениях поиска ссылок.
		If ВсеСвязиВИсключениях Then
			УстановитьПривилегированныйРежим(Истина);
			УдалитьОбъекты(УдаляемыеОбъекты, Ложь);
			УстановитьПривилегированныйРежим(Ложь);
			Прервать; // Выход из цикла.
		EndIf;
	КонецЦикла;

	ПараметрыВыполнения.Вставить("Удаленные", УдаляемыеОбъекты);
	ПараметрыВыполнения.Delete("ИсключенияПоискаСсылок");
	ПараметрыВыполнения.Delete("ИсключающиеПравила");

EndProcedure

// Проверяет что связь в исключениях.
Function СвязьВИсключенияхПоискаСсылок(ПараметрыВыполнения, ОбнаруженныйМетаданные, СтрокаТаблицы)
	// Определение исключающего правила для объекта метаданных, препятствующего удалению:
	// Для регистров (т.н. "необъектных таблиц") - массива реквизитов для поиска в записи регистра.
	// Для ссылочных типов (т.н. "объектных таблиц") - готового запроса для поиска в реквизитах.
	Правило = ПараметрыВыполнения.ИсключающиеПравила[ОбнаруженныйМетаданные]; // Кэш.
	If Правило = Неопределено Then
		Правило = СформироватьИсключающееПравило(ПараметрыВыполнения, ОбнаруженныйМетаданные);
		ПараметрыВыполнения.ИсключающиеПравила.Вставить(ОбнаруженныйМетаданные, Правило);
	EndIf;
	
	// Проверка исключающего правила.
	If Правило = "*" Then
		Return Истина; // Можно удалять (обнаруженный объект метаданных не мешает).
	ElsIf ТипЗнч(Правило) = Тип("Массив") Then // Имена измерений регистра.
		Для Каждого ИмяРеквизита Из Правило Цикл
			If СтрокаТаблицы.ОбнаруженныйСсылка[ИмяРеквизита] = СтрокаТаблицы.УдаляемыйСсылка Then
				Return Истина; // Можно удалять (обнаруженная запись регистра не мешает).
			EndIf;
		КонецЦикла;
	ElsIf ТипЗнч(Правило) = Тип("Запрос") Then // Запрос к ссылочному объекту.
		Правило.УстановитьПараметр("УдаляемыйСсылка", СтрокаТаблицы.УдаляемыйСсылка);
		Правило.УстановитьПараметр("ОбнаруженныйСсылка", СтрокаТаблицы.ОбнаруженныйСсылка);
		If Not Правило.Выполнить().Пустой() Then
			Return Истина; // Можно удалять (обнаруженная ссылка не мешает).
		EndIf;
	EndIf;

	Return Ложь;
EndFunction

// Компонует правило оптимально для проверки.
Function СформироватьИсключающееПравило(ПараметрыВыполнения, ОбнаруженныйМетаданные)
	ИсключениеПоиска = ПараметрыВыполнения.ИсключенияПоискаСсылок[ОбнаруженныйМетаданные];
	If ИсключениеПоиска = "*" Then
		Return "*"; // Можно удалять (обнаруженный объект метаданных не мешает).
	EndIf;
	
	// Формирование исключающего правила.
	ЭтоРегистрСведений = Метаданные.РегистрыСведений.Содержит(ОбнаруженныйМетаданные);
	If ЭтоРегистрСведений Или Метаданные.РегистрыБухгалтерии.Содержит(ОбнаруженныйМетаданные) // IsAccountingRegister

		Или Метаданные.РегистрыНакопления.Содержит(ОбнаруженныйМетаданные) Then // IsAccumulationRegister

		Правило = New Массив;
		If ЭтоРегистрСведений Then
			Для Каждого Измерение Из ОбнаруженныйМетаданные.Измерения Цикл
				If Измерение.Ведущее Then
					Правило.Добавить(Измерение.Имя);
				EndIf;
			КонецЦикла;
		Else
			Для Каждого Измерение Из ОбнаруженныйМетаданные.Измерения Цикл
				Правило.Добавить(Измерение.Имя);
			КонецЦикла;
		EndIf;

		If ТипЗнч(ИсключениеПоиска) = Тип("Массив") Then
			Для Каждого ИмяРеквизита Из ИсключениеПоиска Цикл
				If Правило.Найти(ИмяРеквизита) = Неопределено Then
					Правило.Добавить(ИмяРеквизита);
				EndIf;
			КонецЦикла;
		EndIf;

	ElsIf ТипЗнч(ИсключениеПоиска) = Тип("Массив") Then

		ТекстыЗапросов = New Map;
		ИмяКорневойТаблицы = ОбнаруженныйМетаданные.ПолноеИмя();

		Для Каждого ПутьКРеквизиту Из ИсключениеПоиска Цикл
			ПозицияТочки = СтрНайти(ПутьКРеквизиту, ".");
			If ПозицияТочки = 0 Then
				ПолноеИмяТаблицы = ИмяКорневойТаблицы;
				ИмяРеквизита = ПутьКРеквизиту;
			Else
				ПолноеИмяТаблицы = ИмяКорневойТаблицы + "." + Лев(ПутьКРеквизиту, ПозицияТочки - 1);
				ИмяРеквизита = Сред(ПутьКРеквизиту, ПозицияТочки + 1);
			EndIf;

			ТекстВложенногоЗапроса = ТекстыЗапросов.Получить(ПолноеИмяТаблицы);
			If ТекстВложенногоЗапроса = Неопределено Then
				ТекстВложенногоЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
										 |	1
										 |ИЗ
										 |	" + ПолноеИмяТаблицы + " КАК Таблица
																	 |ГДЕ
																	 |	Таблица.Ссылка = &ОбнаруженныйСсылка
																	 |	И (";
			Else
				ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + Символы.ПС + Символы.Таб + Символы.Таб + "ИЛИ ";
			EndIf;
			ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + "Таблица." + ИмяРеквизита + " = &УдаляемыйСсылка";

			ТекстыЗапросов.Вставить(ПолноеИмяТаблицы, ТекстВложенногоЗапроса);
		КонецЦикла;

		ТекстЗапроса = "";
		Для Каждого КлючИЗначение Из ТекстыЗапросов Цикл
			If ТекстЗапроса <> "" Then
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			EndIf;
			ТекстЗапроса = ТекстЗапроса + КлючИЗначение.Значение + ")";
		КонецЦикла;

		Правило = New Запрос;
		Правило.Текст = ТекстЗапроса;

	Else

		Правило = "";

	EndIf;

	Return Правило;
EndFunction

////////////////////////////////////////////////////////////////////////////////
// Общая механика.

// Инициализирует структуру параметров, необходимых для выполнения других служебных методов.
Procedure ИнициализироватьПараметры(ПараметрыВыполнения)
	// Определение параметров работы программы.
	If Not ПараметрыВыполнения.Свойство("ИскатьПомеченные") Then
		ПараметрыВыполнения.Вставить("ИскатьПомеченные", Истина);
	EndIf;
	If Not ПараметрыВыполнения.Свойство("УдалятьПомеченные") Then
		ПараметрыВыполнения.Вставить("УдалятьПомеченные", Истина);
	EndIf;
	If Not ПараметрыВыполнения.Свойство("Монопольно") Then
		ПараметрыВыполнения.Вставить("Монопольно", Ложь);
	EndIf;
	If Not ПараметрыВыполнения.Свойство("ТехнологическиеОбъекты") Then
		ПараметрыВыполнения.Вставить("ТехнологическиеОбъекты", New Массив);
	EndIf;
	If Not ПараметрыВыполнения.Свойство("ПользовательскиеОбъекты") Then
		ПараметрыВыполнения.Вставить("ПользовательскиеОбъекты", New Массив);
	EndIf;
	If Not ПараметрыВыполнения.Свойство("ВсеПомеченныеНаУдаление") Then
		ПараметрыВыполнения.Вставить("ВсеПомеченныеНаУдаление", New Массив);
		UT_CommonClientServer.SupplementArray(ПараметрыВыполнения.ВсеПомеченныеНаУдаление,
			ПараметрыВыполнения.ТехнологическиеОбъекты);
		UT_CommonClientServer.SupplementArray(ПараметрыВыполнения.ВсеПомеченныеНаУдаление,
			ПараметрыВыполнения.ПользовательскиеОбъекты);
	EndIf;
	If Not ПараметрыВыполнения.Свойство("МодельСервиса") Then
		ПараметрыВыполнения.Вставить("МодельСервиса", UT_Common.DataSeparationEnabled());
		If ПараметрыВыполнения.МодельСервиса Then
//			If UT_Common.SubsystemExists("СтандартныеПодсистемы.РаботаВМоделиСервиса") Then
//				МодульРаботаВМоделиСервиса = UT_Common.CommonModule("РаботаВМоделиСервиса");
//				РазделительОсновныхДанных = МодульРаботаВМоделиСервиса.РазделительОсновныхДанных();
//				РазделительВспомогательныхДанных = МодульРаботаВМоделиСервиса.РазделительВспомогательныхДанных();
//			Else
				РазделительОсновныхДанных = Неопределено;
				РазделительВспомогательныхДанных = Неопределено;
//			EndIf;

			ПараметрыВыполнения.Вставить("ВОбластиДанных", UT_Common.SeparatedDataUsageAvailable());
			ПараметрыВыполнения.Вставить("РазделительОсновныхДанных", РазделительОсновныхДанных);
			ПараметрыВыполнения.Вставить("РазделительВспомогательныхДанных", РазделительВспомогательныхДанных);
		EndIf;
	EndIf;
	If Not ПараметрыВыполнения.Свойство("ИнформацияОТипах") Then
		ПараметрыВыполнения.Вставить("ИнформацияОТипах", New Map);
	EndIf;

	ПрепятствующиеУдалению = New ТаблицаЗначений;
	ПрепятствующиеУдалению.Колонки.Добавить("УдаляемыйСсылка");
	ПрепятствующиеУдалению.Колонки.Добавить("УдаляемыйТип", New ОписаниеТипов("Тип"));
	ПрепятствующиеУдалению.Колонки.Добавить("ОбнаруженныйСсылка");
	ПрепятствующиеУдалению.Колонки.Добавить("ОбнаруженныйТип", New ОписаниеТипов("Тип"));
	ПрепятствующиеУдалению.Колонки.Добавить("ОбнаруженныйПометкаУдаления", New ОписаниеТипов("Булево"));
	ПрепятствующиеУдалению.Колонки.Добавить("Подробно", New ОписаниеТипов("Строка"));

	ПрепятствующиеУдалению.Индексы.Добавить("УдаляемыйСсылка");
	ПрепятствующиеУдалению.Индексы.Добавить("ОбнаруженныйСсылка");

	ПараметрыВыполнения.Вставить("Удаленные", New Массив);
	ПараметрыВыполнения.Вставить("НеУдаленные", New Массив);
	ПараметрыВыполнения.Вставить("ПрепятствующиеУдалению", ПрепятствующиеУдалению);
	ПараметрыВыполнения.Вставить("ПовторноУдаляемые", New Массив);
	ПараметрыВыполнения.Вставить("Интерактивное", ПараметрыВыполнения.Свойство("ПериодЗаписи"));

	ИнициализироватьПараметрыДляРегистрацииПрогресса(ПараметрыВыполнения);
EndProcedure

// Формирует массив помеченных на удаление с учетом разделения.
Procedure ПолучитьПомеченныеНаУдаление(ПараметрыВыполнения)

	ОтметитьНачалоОбходаКоллекции(ПараметрыВыполнения, "ПередПоискомПомеченныхНаУдаление");
//	МодульУдалениеПомеченныхОбъектовПереопределяемый=UT_Common.CommonModule(
//		"УдалениеПомеченныхОбъектовПереопределяемый");
//	If МодульУдалениеПомеченныхОбъектовПереопределяемый <> Неопределено Then
//		МодульУдалениеПомеченныхОбъектовПереопределяемый.ПередПоискомПомеченныхНаУдаление(ПараметрыВыполнения);
//	EndIf;

	УстановитьПривилегированныйРежим(Истина);
	
	// Получение списка помеченных на удаление.
	ОтметитьНачалоОбходаКоллекции(ПараметрыВыполнения, "ПоискПомеченныхНаУдаление");
	ПараметрыВыполнения.ВсеПомеченныеНаУдаление = НайтиПомеченныеНаУдаление();
	
	// Распределение помеченных на удаление по коллекциям.
	ОтметитьНачалоОбходаКоллекции(ПараметрыВыполнения, "ВсеПомеченныеНаУдаление");
	Количество = ПараметрыВыполнения.ВсеПомеченныеНаУдаление.Количество();
	Для Номер = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Номер;
		Ссылка = ПараметрыВыполнения.ВсеПомеченныеНаУдаление[ОбратныйИндекс];

		Информация = СформироватьИнформациюОТипах(ПараметрыВыполнения, ТипЗнч(Ссылка));
		ОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, "ВсеПомеченныеНаУдаление");

		If ПараметрыВыполнения.МодельСервиса И ПараметрыВыполнения.ВОбластиДанных И Not Информация.Разделенный Then
			ПараметрыВыполнения.ВсеПомеченныеНаУдаление.Delete(ОбратныйИндекс);
			Продолжить; // Неразделенные объекты запрещено изменять из области данных.
		EndIf;

		If Информация.ЕстьПредопределенные И Информация.Предопределенные.Найти(Ссылка) <> Неопределено Then
			ПараметрыВыполнения.ВсеПомеченныеНаУдаление.Delete(ОбратныйИндекс);
			Продолжить; // Предопределенные элементы создаются и удаляются только автоматически.
		EndIf;

		If Информация.Технический = Истина Then
			ПараметрыВыполнения.ТехнологическиеОбъекты.Добавить(Ссылка);
		Else
			ПараметрыВыполнения.ПользовательскиеОбъекты.Добавить(Ссылка);
		EndIf;
	КонецЦикла;
EndProcedure

// Формирует информацию о типе объекта метаданных, как то: полное имя, представления, вид и т.п.
Function СформироватьИнформациюОТипах(ПараметрыВыполнения, Тип) Export
	Информация = ПараметрыВыполнения.ИнформацияОТипах.Получить(Тип); // Кэш.
	If Информация <> Неопределено Then
		Return Информация;
	EndIf;

	Информация = New Structure("ПолноеИмя, ПредставлениеЭлемента, ПредставлениеСписка,
								 |Вид, Ссылочный, Технический, Разделенный,
								 |Иерархический, ТекстЗапросаПоИерархии,
								 |ЕстьПодчиненные, ТекстЗапросаПоПодчиненным,
								 |ЕстьПредопределенные, Предопределенные");
	
	// Поиск объекта метаданных.
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
	
	// Заполнение базовой информации.
	Информация.ПолноеИмя = ВРег(ОбъектМетаданных.ПолноеИмя());
	
	// Представления: элемента и списка.
	СтандартныеСвойства = New Structure("ПредставлениеОбъекта, РасширенноеПредставлениеОбъекта, ПредставлениеСписка, РасширенноеПредставлениеСписка");
	ЗаполнитьЗначенияСвойств(СтандартныеСвойства, ОбъектМетаданных);
	If ЗначениеЗаполнено(СтандартныеСвойства.ПредставлениеОбъекта) Then
		Информация.ПредставлениеЭлемента = СтандартныеСвойства.ПредставлениеОбъекта;
	ElsIf ЗначениеЗаполнено(СтандартныеСвойства.РасширенноеПредставлениеОбъекта) Then
		Информация.ПредставлениеЭлемента = СтандартныеСвойства.РасширенноеПредставлениеОбъекта;
	Else
		Информация.ПредставлениеЭлемента = ОбъектМетаданных.Представление();
	EndIf;
	If ЗначениеЗаполнено(СтандартныеСвойства.ПредставлениеСписка) Then
		Информация.ПредставлениеСписка = СтандартныеСвойства.ПредставлениеСписка;
	ElsIf ЗначениеЗаполнено(СтандартныеСвойства.РасширенноеПредставлениеСписка) Then
		Информация.ПредставлениеСписка = СтандартныеСвойства.РасширенноеПредставлениеСписка;
	Else
		Информация.ПредставлениеСписка = ОбъектМетаданных.Представление();
	EndIf;
	
	// Вид и его свойства.
	Информация.Вид = Лев(Информация.ПолноеИмя, СтрНайти(Информация.ПолноеИмя, ".") - 1);
	If Информация.Вид = "СПРАВОЧНИК" Или Информация.Вид = "ДОКУМЕНТ" Или Информация.Вид = "ПЕРЕЧИСЛЕНИЕ"
		Или Информация.Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Или Информация.Вид = "ПЛАНСЧЕТОВ" Или Информация.Вид = "ПЛАНВИДОВРАСЧЕТА"
		Или Информация.Вид = "БИЗНЕСПРОЦЕСС" Или Информация.Вид = "ЗАДАЧА" Или Информация.Вид = "ПЛАНОБМЕНА" Then
		Информация.Ссылочный = Истина;
	Else
		Информация.Ссылочный = Ложь;
	EndIf;

	If Информация.Вид = "СПРАВОЧНИК" Или Информация.Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Then
		Информация.Иерархический = ОбъектМетаданных.Иерархический;
	ElsIf Информация.Вид = "ПЛАНСЧЕТОВ" Then
		Информация.Иерархический = Истина;
	Else
		Информация.Иерархический = Ложь;
	EndIf;
	If Информация.Иерархический Then
		ШаблонЗапроса = "ВЫБРАТЬ Ссылка ИЗ &ПолноеИмя ГДЕ Родитель = &УдаляемыйСсылка";
		Информация.ТекстЗапросаПоИерархии = СтрЗаменить(ШаблонЗапроса, "&ПолноеИмя", Информация.ПолноеИмя);
	EndIf;

	Информация.ЕстьПодчиненные = Ложь;
	Информация.ТекстЗапросаПоПодчиненным = "";
	If Информация.Вид = "СПРАВОЧНИК" Или Информация.Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Или Информация.Вид = "ПЛАНОБМЕНА"
		Или Информация.Вид = "ПЛАНСЧЕТОВ" Или Информация.Вид = "ПЛАНВИДОВРАСЧЕТА" Then

		ШаблонЗапроса = "ВЫБРАТЬ Ссылка ИЗ Справочник.&Имя ГДЕ Владелец = &УдаляемыйСсылка";
		ТекстЗапроса = "";

		Для Каждого Справочник Из Метаданные.Справочники Цикл
			If Справочник.Владельцы.Содержит(ОбъектМетаданных) Then
				If Информация.ЕстьПодчиненные = Ложь Then
					Информация.ЕстьПодчиненные = Истина;
				Else
					ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
				EndIf;
				ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапроса, "&Имя", Справочник.Имя);
			EndIf;
		КонецЦикла;

		Информация.ТекстЗапросаПоПодчиненным = ТекстЗапроса;
	EndIf;

	Информация.Технический = ЭтоТехническийОбъект(Информация.ПолноеИмя);
	If ПараметрыВыполнения.МодельСервиса Then

//		If UT_Common.SubsystemExists("СтандартныеПодсистемы.РаботаВМоделиСервиса") Then
//			МодульРаботаВМоделиСервиса = UT_Common.CommonModule("РаботаВМоделиСервиса");
//			ЭтоРазделенныйОбъектМетаданных = МодульРаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(ОбъектМетаданных);
//		Else
			ЭтоРазделенныйОбъектМетаданных = Ложь;
//		EndIf;

		Информация.Разделенный = ЭтоРазделенныйОбъектМетаданных;

	EndIf;

	If Информация.Вид = "СПРАВОЧНИК" Или Информация.Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Или Информация.Вид = "ПЛАНСЧЕТОВ"
		Или Информация.Вид = "ПЛАНВИДОВРАСЧЕТА" Then
		Запрос = New Запрос("ВЫБРАТЬ Ссылка ИЗ " + Информация.ПолноеИмя + " ГДЕ Предопределенный И ПометкаУдаления");
		Информация.Предопределенные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Информация.ЕстьПредопределенные = Информация.Предопределенные.Количество() > 0;
	Else
		Информация.ЕстьПредопределенные = Ложь;
	EndIf;

	ПараметрыВыполнения.ИнформацияОТипах.Вставить(Тип, Информация);

	Return Информация;
EndFunction

Function ЭтоТехническийОбъект(Знач ПолноеИмяОбъекта)
	Return ПолноеИмяОбъекта = "СПРАВОЧНИК.ИДЕНТИФИКАТОРЫОБЪЕКТОВМЕТАДАННЫХ" Или ПолноеИмяОбъекта = "СПРАВОЧНИК.ПРЕДОПРЕДЕЛЕННЫЕВАРИАНТЫОТЧЕТОВ"
		Или ПолноеИмяОбъекта = "СПРАВОЧНИК.ИДЕНТИФИКАТОРЫОБЪЕКТОВРАСШИРЕНИЙ" Или ПолноеИмяОбъекта
		= "СПРАВОЧНИК.ПРЕДОПРЕДЕЛЕННЫЕВАРИАНТЫОТЧЕТОВРАСШИРЕНИЙ";
EndFunction

// Регистрирует предупреждение в журнале регистрации.
Procedure ЗаписатьПредупреждение(Ссылка, ИнформацияОбОшибке)
	If ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Then
		ТекстДляЖурнала = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Else
		ТекстДляЖурнала = ИнформацияОбОшибке;
	EndIf;

	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Удаление помеченных'", UT_CommonClientServer.DefaultLanguageCode()),
		УровеньЖурналаРегистрации.Предупреждение, , Ссылка, ТекстДляЖурнала);
EndProcedure

// Регистрация причины неудаления.
Procedure ЗаписатьПричинуВРезультат(ПараметрыВыполнения, СтрокаТаблицы)
	УдаляемыйТип        = ТипЗнч(СтрокаТаблицы.УдаляемыйСсылка);
	УдаляемыйИнформация = СформироватьИнформациюОТипах(ПараметрыВыполнения, УдаляемыйТип);
	If УдаляемыйИнформация.Технический Then
		Return;
	EndIf;
	
	// Добавление не удаленных объектов.
	If ПараметрыВыполнения.НеУдаленные.Найти(СтрокаТаблицы.УдаляемыйСсылка) = Неопределено Then
		ПараметрыВыполнения.НеУдаленные.Добавить(СтрокаТаблицы.УдаляемыйСсылка);
	EndIf;

	Причина = ПараметрыВыполнения.ПрепятствующиеУдалению.Добавить();
	ЗаполнитьЗначенияСвойств(Причина, СтрокаТаблицы);
	Причина.УдаляемыйТип    = УдаляемыйТип;
	Причина.ОбнаруженныйТип = ТипЗнч(Причина.ОбнаруженныйСсылка);

	If СтрокаТаблицы.ОбнаруженныйСсылка = Неопределено Then
		If Метаданные.Константы.Содержит(СтрокаТаблицы.ОбнаруженныйМетаданные) Then
			Причина.ОбнаруженныйТип = Тип("КонстантаМенеджерЗначения." + СтрокаТаблицы.ОбнаруженныйМетаданные.Имя);
		Else
			Причина.ОбнаруженныйСсылка = СтрШаблон(
				НСтр("ru = 'Обнаружены неразрешимые ссылки (%1)'"),
				СтрокаТаблицы.ОбнаруженныйМетаданные.Представление());
			Причина.ОбнаруженныйТип = Тип("Строка");
			Return;
		EndIf;
	EndIf;
	
	// Регистрация информации об объектах метаданных (если требуется).
	ОбнаруженныйИнформация = СформироватьИнформациюОТипах(ПараметрыВыполнения, Причина.ОбнаруженныйТип);
	
	// Заполнение подчиненных полей.
	If ОбнаруженныйИнформация.Ссылочный Then
		Причина.ОбнаруженныйПометкаУдаления = UT_Common.ObjectAttributeValue(Причина.ОбнаруженныйСсылка,
			"ПометкаУдаления");
	Else
		Причина.ОбнаруженныйПометкаУдаления = Ложь;
	EndIf;
EndProcedure

// Основная механика удаления помеченных объектов.
Function ExtractResult(ExecutionParameters)
	DeletionResult = ExecutionParameters;
	DeletionResult.Delete("ВсеПомеченныеНаУдаление");
	DeletionResult.Delete("ВсеПомеченныеНаУдаление");
	Return DeletionResult;
EndFunction

////////////////////////////////////////////////////////////////////////////////
// Передача информации на клиент.

// Инициализирует структуру параметров, необходимых для передачи на клиент.
Procedure ИнициализироватьПараметрыДляРегистрацииПрогресса(ПараметрыВыполнения)
	If Not ПараметрыВыполнения.Интерактивное Then
		Return;
	EndIf;

	ПараметрыВыполнения.Вставить("ДостигнутыйПроцент", 0);
	ПараметрыВыполнения.Вставить("Диапазон", 0);
	ПараметрыВыполнения.Вставить("СледующийКонтрольныйНомер", 0);
	ПараметрыВыполнения.Вставить("Номер", 0);
	ПараметрыВыполнения.Вставить("Всего", 0);
	ПараметрыВыполнения.Вставить("Время", ТекущаяДатаСеанса() - 0.1);

	ПараметрыВыполнения.Вставить("Диапазоны", New Map);

	ОбщийВес = 0;
	If ПараметрыВыполнения.ИскатьПомеченные Then
		ПараметрыВыполнения.Диапазоны.Вставить("ПередПоискомПомеченныхНаУдаление", 5);
		ПараметрыВыполнения.Диапазоны.Вставить("ПоискПомеченныхНаУдаление", 4);
		ПараметрыВыполнения.Диапазоны.Вставить("ВсеПомеченныеНаУдаление", 1);
		ОбщийВес = ОбщийВес + 10;
	EndIf;
	If ПараметрыВыполнения.УдалятьПомеченные Then
		If ПараметрыВыполнения.Монопольно Then
			ПараметрыВыполнения.Диапазоны.Вставить("МонопольноеУдаление", 80);
			ПараметрыВыполнения.Диапазоны.Вставить("ПрепятствующиеУдалению", 10);
		Else // Не монопольно.
			ПараметрыВыполнения.Диапазоны.Вставить("ТехнологическиеОбъекты", 10);
			ПараметрыВыполнения.Диапазоны.Вставить("ПользовательскиеОбъекты", 70);
			ПараметрыВыполнения.Диапазоны.Вставить("ПовторноУдаляемые", 10);
		EndIf;
		ОбщийВес = ОбщийВес + 90;
	EndIf;
	If ОбщийВес <> 0 И ОбщийВес <> 100 Then
		Коэффициент = 100 / ОбщийВес;
		Для Каждого КлючИЗначение Из ПараметрыВыполнения.Диапазоны Цикл
			ПараметрыВыполнения.Диапазоны.Вставить(КлючИЗначение.Ключ, Окр(КлючИЗначение.Значение * Коэффициент, 0));
		КонецЦикла;
	EndIf;

EndProcedure

// Регистрирует начало процесса.
Procedure ОтметитьНачалоОбходаКоллекции(ПараметрыВыполнения, ИмяКоллекции, Коллекция = Неопределено)
	If Not ПараметрыВыполнения.Интерактивное Then
		Return;
	EndIf;
	ПараметрыВыполнения.ДостигнутыйПроцент = ПараметрыВыполнения.ДостигнутыйПроцент + ПараметрыВыполнения.Диапазон;
	ПараметрыВыполнения.Диапазон = ПараметрыВыполнения.Диапазоны[ИмяКоллекции];
	ПараметрыВыполнения.СледующийКонтрольныйНомер = 0;
	ПараметрыВыполнения.Номер = 0;

	If Коллекция <> Неопределено Или ПараметрыВыполнения.Свойство(ИмяКоллекции, Коллекция) Then
		ПараметрыВыполнения.Всего = Коллекция.Количество();
	Else
		ПараметрыВыполнения.Всего = 1;
		ОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, ИмяКоллекции);
	EndIf;
EndProcedure

// Регистрирует прогресс.
Procedure ОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, ИмяКоллекции)
	If Not ПараметрыВыполнения.Интерактивное Then
		Return;
	EndIf;
	
	// Проверяется целесообразность передачи информации на клиент.
	If ПараметрыВыполнения.ИскатьПомеченные Then
		Return; // Если текущий шаг - расчет помеченных, то оповещать клиент не требуется.
	EndIf;
	
	// Проверяется целесообразность передачи информации на клиент.
	If ПараметрыВыполнения.Всего < 10 Then
		Return; // Если всего обрабатывается меньше 10 объектов - то оповещать клиент не требуется.
	EndIf;
	
	// Регистрация прогресса.
	ПараметрыВыполнения.Номер = ПараметрыВыполнения.Номер + 1;
	
	// Проверка что подошло время передачи информации на клиент.
	If ТекущаяДатаСеанса() < ПараметрыВыполнения.Время Then
		Return; // Не чаще, чем раз в 3 секунды.
	EndIf;
	
	// Установка следующего времени передачи информации на клиент.
	ПараметрыВыполнения.Время = ПараметрыВыполнения.Время + ПараметрыВыполнения.ПериодЗаписи;
	
	// Проверка что набралось достаточно изменений для передачи информации на клиент.
	If ПараметрыВыполнения.Номер < ПараметрыВыполнения.СледующийКонтрольныйНомер Then
		Return; // Не чаще, чем набралось измененных объектов для изменения прогресса на 1 шаг.
	EndIf;
	ШагОповещения = Цел(ПараметрыВыполнения.Всего / 100) + 1;
	ПараметрыВыполнения.СледующийКонтрольныйНомер = ПараметрыВыполнения.Номер + ШагОповещения;
	
	// Расчет информации для передачи на клиент.

	Процент = ПараметрыВыполнения.ДостигнутыйПроцент + ПараметрыВыполнения.Диапазон * ПараметрыВыполнения.Номер
		/ ПараметрыВыполнения.Всего;
	
	// Подготовка передаваемых параметров.
	If ИмяКоллекции = "ПередПоискомПомеченныхНаУдаление" Then

		Текст = НСтр("ru = 'Подготовка к поиску объектов, помеченных на удаление.'");

	ElsIf ИмяКоллекции = "НайтиПомеченныеНаУдаление" Then

		Текст = НСтр("ru = 'Поиск объектов, помеченных на удаление.'");

	ElsIf ИмяКоллекции = "ВсеПомеченныеНаУдаление" Then

		Текст = НСтр("ru = 'Анализ помеченных на удаление.'");

	ElsIf ИмяКоллекции = "ТехнологическиеОбъекты" Then

		Текст = НСтр("ru = 'Подготовка к удалению.'");

	ElsIf ИмяКоллекции = "МонопольноеУдаление" Then

		Текст = НСтр("ru = 'Выполняется удаление объектов.'");

	ElsIf ИмяКоллекции = "ПользовательскиеОбъекты" Then

		НеУдалено = ПараметрыВыполнения.НеУдаленные.Количество();
		ПредставлениеНомер     = Формат(ПараметрыВыполнения.Номер, "ЧН=0; ЧГ=");
		ПредставлениеВсего     = Формат(ПараметрыВыполнения.Всего, "ЧН=0; ЧГ=");
		ПредставлениеНеУдалено = Формат(НеУдалено, "ЧН=0; ЧГ=");
		If НеУдалено = 0 Then // Переход на СтрШаблон невозможен.
			Текст = НСтр("ru = 'Удалено: %1 из %2 объектов.'");
			Текст = СтрШаблон(Текст, ПредставлениеНомер, ПредставлениеВсего);
		Else
			Текст = НСтр("ru = 'Обработано: %1 из %2 объектов, из них не удалено: %3.'");
			Текст = СтрШаблон(Текст, ПредставлениеНомер, ПредставлениеВсего, ПредставлениеНеУдалено);
		EndIf;

	ElsIf ИмяКоллекции = "ПовторноУдаляемые" Then

		Текст = СтрШаблон(
			НСтр("ru = 'Повторная проверка не удаленных объектов: %1 из %2.'"), Формат(ПараметрыВыполнения.Номер,
			"ЧН=0; ЧГ="), Формат(ПараметрыВыполнения.Всего, "ЧН=0; ЧГ="));

	ElsIf ИмяКоллекции = "ПрепятствующиеУдалению" Then

		Текст = СтрШаблон(
			НСтр("ru = 'Анализ объектов, препятствующих удалению: %1 из %2.'"), Формат(ПараметрыВыполнения.Номер,
			"ЧН=0; ЧГ="), Формат(ПараметрыВыполнения.Всего, "ЧН=0; ЧГ="));

	Else

		Return;

	EndIf;
	
	// Регистрация сообщения для чтения из клиентского сеанса.
	UT_TimeConsumingOperations.СообщитьПрогресс(Процент, Текст);
EndProcedure

#EndRegion

#EndIf