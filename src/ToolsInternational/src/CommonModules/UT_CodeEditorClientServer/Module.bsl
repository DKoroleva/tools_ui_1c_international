

#Region ПрограммныйИнтерфейс

Function ПрефиксЭлементовРедактораКода() Экспорт
	Return "РедакторКода1С";
EndFunction

Function ИмяРеквизитаРедактораКода(ИдентификаторРедактора) Экспорт
	Return ПрефиксЭлементовРедактораКода()+"_"+ИдентификаторРедактора;
EndFunction

Function ИмяРеквизитаРедактораКодаВидРедактора() Экспорт
	Return ПрефиксЭлементовРедактораКода()+"_ВидРедактора";
EndFunction

Function ИмяРеквизитаРедактораКодаАдресБиблиотеки() Экспорт
	Return ПрефиксЭлементовРедактораКода()+"_АдресБиблиотекиВоВременномХранилище";
EndFunction

Function ИмяРеквизитаРедактораКодаСписокРедакторовФормы() Экспорт
	Return ПрефиксЭлементовРедактораКода()+"_СписокРедакторовФормы";
EndFunction

Function ИмяРеквизитаРедактораКодаРедакторыФормы(ИдентификаторРедактора) Экспорт
	Return ПрефиксЭлементовРедактораКода()+"_РедакторыФормы";
EndFunction

Function ВариантыРедактораКода() Экспорт
	Варианты = New Structure;
	Варианты.Insert("Текст", "Текст");
	Варианты.Insert("Ace", "Ace");
	Варианты.Insert("Monaco", "Monaco");

	Return Варианты;
EndFunction

Function ВариантРедактораПоУмолчанию() Экспорт
	Return ВариантыРедактораКода().Monaco;
EndFunction

Function РедакторКодаИспользуетПолеHTML(ВидРедактора) Экспорт
	Варианты=ВариантыРедактораКода();
	Return ВидРедактора = Варианты.Ace
		Или ВидРедактора = Варианты.Monaco;
EndFunction

Function ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент) Экспорт
	РедакторыФормы = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];

	For Each КлючЗначение In РедакторыФормы Do
		If КлючЗначение.Значение.ПолеРедактора = Элемент.Имя Then
			Return КлючЗначение.Ключ;
		EndIf;
	EndDo;

	Return Undefined;
EndFunction

Function ВыполнитьАлгоритм(__ТекстАлготима__, __Контекст__) Экспорт
	Успешно = True;
	ОписаниеОшибки = "";
	
	ВыполняемыйТекстАлгоритма = ДополненныйКонтекстомКодАлгоритма(__ТекстАлготима__, __Контекст__);

	НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Try
		Выполнить (ВыполняемыйТекстАлгоритма);
	Except
		Успешно = False;
		ОписаниеОшибки = ОписаниеОшибки();
		Message(ОписаниеОшибки);
	EndTry;
	ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();

	РезультатВыполнения = New Structure;
	РезультатВыполнения.Insert("Успешно", Успешно);
	РезультатВыполнения.Insert("ВремяВыполнения", ОкончаниеВыполнения - НачалоВыполнения);
	РезультатВыполнения.Insert("ОписаниеОшибки", ОписаниеОшибки);

	Return РезультатВыполнения;
EndFunction

#EndRegion

#Region СлужебныйПрограммныйИнтерфейс

Function ВариантыЯзыкаСинтаксисаРедактораMonaco() Экспорт
	ЯзыкиСинтаксиса = New Structure;
	ЯзыкиСинтаксиса.Insert("Авто", "Авто");
	ЯзыкиСинтаксиса.Insert("Русский", "Русский");
	ЯзыкиСинтаксиса.Insert("Английский", "Английский");
	
	Return ЯзыкиСинтаксиса;
EndFunction

Function ВариантыТемыРедактораMonaco() Экспорт
	Варианты = New Structure;
	
	Варианты.Insert("Светлая", "Светлая");
	Варианты.Insert("Темная", "Темная");
	
	Return Варианты;
EndFunction

Function ТемаРедактораMonacoПоУмолчанию() Экспорт
	ТемыРедактора = ВариантыТемыРедактораMonaco();
	
	Return ТемыРедактора.Светлая;
EndFunction
Function ЯзыкСинтаксисаРедактораMonacoПоУмолчанию() Экспорт
	Варианты = ВариантыЯзыкаСинтаксисаРедактораMonaco();
	
	Return Варианты.Авто;
EndFunction

Function ПараметрыРедактораMonacoПоУмолчанию() Экспорт
	ПараметрыРедактора = New Structure;
	ПараметрыРедактора.Insert("ВысотаСтрок", 0);
	ПараметрыРедактора.Insert("Тема", ТемаРедактораMonacoПоУмолчанию());
	ПараметрыРедактора.Insert("ЯзыкСинтаксиса", ЯзыкСинтаксисаРедактораMonacoПоУмолчанию());
	ПараметрыРедактора.Insert("ИспользоватьКартуКода", False);
	ПараметрыРедактора.Insert("СкрытьНомераСтрок", False);
	ПараметрыРедактора.Insert("КаталогиИсходныхФайлов", New Array);
	
	Return ПараметрыРедактора;
EndFunction

Function ПараметрыРедактораКодаПоУмолчанию() Экспорт
	ПараметрыРедактора = New Structure;
	ПараметрыРедактора.Insert("Вариант",  ВариантРедактораПоУмолчанию());
	ПараметрыРедактора.Insert("РазмерШрифта", 0);
	ПараметрыРедактора.Insert("Monaco", ПараметрыРедактораMonacoПоУмолчанию());
	
	Return ПараметрыРедактора;
EndFunction

Function НовыйОписаниеКаталогаИсходныхФайловКонфигурации() Экспорт
	Описание = New Structure;
	Описание.Insert("Каталог", "");
	Описание.Insert("Источник", "");
	
	Return Описание;
EndFunction

#EndRegion

#Region СлужебныеПроцедурыИФункции

Function ДополненныйКонтекстомКодАлгоритма(ТекстАлготима, Контекст)
	ПодготовленныйКод="";

	For Each КлючЗначение In Контекст Do
		ПодготовленныйКод = ПодготовленныйКод +"
		|"+КлючЗначение.Ключ+"=__Контекст__."+КлючЗначение.Ключ+";";
	EndDo;

	ПодготовленныйКод=ПодготовленныйКод + Chars.LF + ТекстАлготима;

	Return ПодготовленныйКод;
EndFunction

#EndRegion