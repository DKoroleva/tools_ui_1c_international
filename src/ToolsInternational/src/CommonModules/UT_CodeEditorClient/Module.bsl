#Region ПрограммныйИнтерфейс

Procedure FormOnOpen(Форма, NotifyDescriptionОЗавершении = Undefined) Экспорт
	ДопПараметры = New Structure;
	ДопПараметры.Insert("NotifyDescriptionОЗавершении", NotifyDescriptionОЗавершении);
	ДопПараметры.Insert("Форма", Форма);

	UT_CommonClient.AttachFileSystemExtensionWithPossibleInstallation(
			New NotifyDescription("ФормаПриОткрытииЗавершениеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект,
		ДопПараметры));
EndProcedure

Function ВсеРедакторыФормыИнициализированы(РедакторыФормы)
	Результат = True;
	For Each КлючЗначение In РедакторыФормы Do
		If Not КлючЗначение.Значение.Инициализирован Then
			Результат = False;
			Breack;
		EndIf;
	EndDo;

	Return Результат;
EndFunction

Procedure ИнициализироватьРедаторыФормыПослеФормированияПолей(Форма, РедакторыФормы, ВидРедактора, ВидыРедактора)
	For Each КлючЗначение In РедакторыФормы Do
		ПараметрыРедактора = КлючЗначение.Значение;
		ЭлементФормыРедактора = Форма.Элементы[ПараметрыРедактора.ПолеРедактора];
		If Not ЭлементФормыРедактора.Видимость Then
			Continue;
		EndIf;
			
		If ВидРедактора = ВидыРедактора.Текст Then
			If ЗначениеЗаполнено(ПараметрыРедактора.ПараметрыРедактора.РазмерШрифта) Then
				ЭлементФормыРедактора.Шрифт = New Шрифт(, ПараметрыРедактора.ПараметрыРедактора.РазмерШрифта);
			EndIf;
		ElseIf ВидРедактора = ВидыРедактора.Ace Then 
			ДокументView = ЭлементФормыРедактора.Документ.defaultView;
			If ЗначениеЗаполнено(ПараметрыРедактора.ПараметрыРедактора.РазмерШрифта) Then
				ДокументView.editor.setFontSize(ПараметрыРедактора.ПараметрыРедактора.РазмерШрифта);		
			EndIf;
		ElseIf ВидРедактора = ВидыРедактора.Monaco Then
			ДокументView = ЭлементФормыРедактора.Документ.defaultView;
			ДокументView.setOption("autoResizeEditorLayout", True);

			Инфо = New СистемнаяИнформация;
			ДокументView.init(Инфо.ВерсияПриложения);
			ДокументView.hideScrollX();
			ДокументView.hideScrollY();
			ДокументView.showStatusBar();
			ДокументView.enableQuickSuggestions();
			If ЗначениеЗаполнено(ПараметрыРедактора.ПараметрыРедактора.РазмерШрифта) Then
				ДокументView.setFontSize(ПараметрыРедактора.ПараметрыРедактора.РазмерШрифта);
			EndIf;
			If ЗначениеЗаполнено(ПараметрыРедактора.ПараметрыРедактора.ВысотаСтрок) Then
				ДокументView.setLineHeight(ПараметрыРедактора.ПараметрыРедактора.ВысотаСтрок);
			EndIf;

			ДокументView.disableKeyBinding(9);
			ДокументView.setOption("dragAndDrop", True);

			ТемыРедактора = UT_CodeEditorClientServer.ВариантыТемыРедактораMonaco();
			If ПараметрыРедактора.ПараметрыРедактора.Тема = ТемыРедактора.Темная Then
				ДокументView.setTheme("bsl-dark");
			Else
				ДокументView.setTheme("bsl-white");
			EndIf;

			ЯзыкиРедактора = UT_CodeEditorClientServer.ВариантыЯзыкаСинтаксисаРедактораMonaco();
			If ПараметрыРедактора.ПараметрыРедактора.ЯзыкСинтаксиса = ЯзыкиРедактора.Английский Then
				ДокументView.switchLang();
			ElseIf ПараметрыРедактора.ПараметрыРедактора.ЯзыкСинтаксиса = ЯзыкиРедактора.Авто Then
				ЯзыкСинтаксиса = UT_ApplicationParameters["ЯзыкСинтаксисаКонфигурации"];
				If ЯзыкСинтаксиса = "Английский" Then
					ДокументView.switchLang();
				EndIf;
			EndIf;

			ДокументView.minimap(ПараметрыРедактора.ПараметрыРедактора.ИспользоватьКартуКода);

			If ПараметрыРедактора.ПараметрыРедактора.СкрытьНомераСтрок Then
				ДокументView.hideLineNumbers();
			EndIf;

			ДокументView.clearMetadata();

			ОписаниеКонфигурацииДляИнициализации = ОписаниеМетаданныйДляИнициализацииРедактораMonaco();

	//		MetadataКонфигурации = ОписаниеМетаданныхКонфигурацииДляРедактораMonaco();
			ДокументView.updateMetadata(UT_CommonClientServer.mWriteJSON(
				ПолучитьСписокОбъектовМетаданныхИзКоллекцииДляРедактораMonaco(
				ОписаниеКонфигурацииДляИнициализации.ОбщиеМодули)), "commonModules.items");
		EndIf;
	EndDo;
EndProcedure

Procedure CodeEditorDeferredInitializingEditors(Форма) Экспорт
	ВидРедактора = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаВидРедактора()];
	ВидыРедактора = UT_CodeEditorClientServer.ВариантыРедактораКода();
	РедакторыФормы = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];

	ИнициализироватьРедаторыФормыПослеФормированияПолей(Форма, РедакторыФормы, ВидРедактора, ВидыРедактора);
	Форма.Attachable_CodeEditorInitializingCompletion();
//	Форма.Attachable_CodeEditorInitializingCompletion(УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент));
EndProcedure

Procedure HTMLEditorFieldDocumentGenerated(Форма, Элемент) Экспорт
	ИдентификаторРедактора = UT_CodeEditorClientServer.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	РедакторыФормы = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];

	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];
	ПараметрыРедактора.Insert("Инициализирован", True);

	If Not ВсеРедакторыФормыИнициализированы(РедакторыФормы) Then
		Return;
	EndIf;
	Форма.ПодключитьОбработчикОжидания("Attached_CodeEditorDeferredInitializingEditors", 0.1, True);
EndProcedure

Procedure HTMLEditorFieldOnClick(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	ВидРедактора = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаВидРедактора()];
	ВидыРедактора = UT_CodeEditorClientServer.ВариантыРедактораКода();

	If ВидРедактора = ВидыРедактора.Monaco Then
		ПолеРедактораHTMLПриНажатииMonaco(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	EndIf;
EndProcedure

Procedure УстановитьТекстРедактораЭлементаФормы(Форма, Элемент, Текст) Экспорт
	ИдентификаторРедактора = UT_CodeEditorClientServer.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	If ИдентификаторРедактора = Undefined Then
		Return;
	EndIf;

	SetEditorText(Форма, ИдентификаторРедактора, Текст);
EndProcedure

Procedure SetEditorText(Форма, ИдентификаторРедактора, Текст) Экспорт
	ВидыРедакторов = UT_CodeEditorClientServer.ВариантыРедактораКода();
	ВидРедактора = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаВидРедактора()];

	РедакторыФормы = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	If Not ВсеРедакторыФормыИнициализированы(РедакторыФормы) Then
		Return;
	EndIf;

	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];
	If ВидРедактора = ВидыРедакторов.Текст Then
		Форма[ПараметрыРедактора.ИмяРеквизита] = Текст;
	ElseIf ВидРедактора = ВидыРедакторов.Ace Then
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.editor.setValue(Текст, -1);
	ElseIf ВидРедактора = ВидыРедакторов.Monaco Then
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.updateText(Текст);
	EndIf;
EndProcedure

Function EditorCodeText(Форма, ИдентификаторРедактора) Экспорт
	ВидыРедакторов = UT_CodeEditorClientServer.ВариантыРедактораКода();
	ВидРедактора = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаВидРедактора()];

	РедакторыФормы = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	If Not ВсеРедакторыФормыИнициализированы(РедакторыФормы) Then
		Return "";
	EndIf;
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	ТекстКода="";

	If ВидРедактора = ВидыРедакторов.Текст Then
		ТекстКода = Форма[ПараметрыРедактора.ИмяРеквизита];
	ElseIf ВидРедактора = ВидыРедакторов.Ace Then
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.editor.getValue();
	ElseIf ВидРедактора = ВидыРедакторов.Monaco Then
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.getText();
	EndIf;

	Return СокрЛП(ТекстКода);
EndFunction

Function ТекстКодаРедактораЭлементаФормы(Форма, Элемент) Экспорт
	ИдентификаторРедактора = UT_CodeEditorClientServer.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	If ИдентификаторРедактора = Undefined Then
		Return "";
	EndIf;

	Return EditorCodeText(Форма, ИдентификаторРедактора);
EndFunction

Function EditorSelectionBounds(Форма, ИдентификаторРедактора) Экспорт
	ВидыРедакторов = UT_CodeEditorClientServer.ВариантыРедактораКода();
	ВидРедактора = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаВидРедактора()];

	РедакторыФормы = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	If Not ВсеРедакторыФормыИнициализированы(РедакторыФормы) Then
		Return НовыйГраницыВыделения();
	EndIf;

	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	ГраницыВыделения = НовыйГраницыВыделения();

	If ВидРедактора = ВидыРедакторов.Текст Then
		ЭлементРедактора = Форма.Элементы[ПараметрыРедактора.ПолеРедактора];
			
		ЭлементРедактора.ПолучитьГраницыВыделения(ГраницыВыделения.НачалоСтроки, ГраницыВыделения.НачалоКолонки,
			ГраницыВыделения.КонецСтроки, ГраницыВыделения.КонецКолонки);		
	ElseIf ВидРедактора = ВидыРедакторов.Ace Then
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ВыделеннаяОбласть = ДокументHTML.editor.getSelectionRange();
		
		ГраницыВыделения.НачалоСтроки = ВыделеннаяОбласть.start.row;
		ГраницыВыделения.НачалоКолонки = ВыделеннаяОбласть.start.column;
		ГраницыВыделения.КонецСтроки = ВыделеннаяОбласть.end.row;
		ГраницыВыделения.КонецКолонки = ВыделеннаяОбласть.end.column;
	ElseIf ВидРедактора = ВидыРедакторов.Monaco Then
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		
		Выделение = ДокументHTML.getSelection();
		ГраницыВыделения.НачалоСтроки = Выделение.startLineNumber;
		ГраницыВыделения.НачалоКолонки = Выделение.startColumn;
		ГраницыВыделения.КонецСтроки = Выделение.endLineNumber;
		ГраницыВыделения.КонецКолонки = Выделение.endColumn;
	EndIf;

	Return ГраницыВыделения;
	
EndFunction

Function ГраницыВыделенияРедактораЭлементаФормы(Форма, Элемент) Экспорт
	ИдентификаторРедактора = UT_CodeEditorClientServer.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	If ИдентификаторРедактора = Undefined Then
		Return НовыйГраницыВыделения();
	EndIf;
	
	Return EditorSelectionBounds(Форма, ИдентификаторРедактора);	
EndFunction

Procedure SetTextSelectionBounds(Форма, ИдентификаторРедактора, НачалоСтроки, НачалоКолонки, КонецСтроки,
	КонецКолонки) Экспорт

	ВидыРедакторов = UT_CodeEditorClientServer.ВариантыРедактораКода();
	ВидРедактора = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаВидРедактора()];

	РедакторыФормы = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	If Not ВсеРедакторыФормыИнициализированы(РедакторыФормы) Then
		Return;
	EndIf;
	
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	If ВидРедактора = ВидыРедакторов.Текст Then
		ЭлементРедактора = Форма.Элементы[ПараметрыРедактора.ПолеРедактора];
			
		ЭлементРедактора.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);		
	ElseIf ВидРедактора = ВидыРедакторов.Ace Then
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.setSelection(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	ElseIf ВидРедактора = ВидыРедакторов.Monaco Then
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.setSelection(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	EndIf;

EndProcedure

Procedure УстановитьГраницыВыделенияЭлементаФормы(Форма, Элемент, НачалоСтроки, НачалоКолонки, КонецСтроки,
	КонецКолонки) Экспорт

	ИдентификаторРедактора = UT_CodeEditorClientServer.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	If ИдентификаторРедактора = Undefined Then
		Return;
	EndIf;

	SetTextSelectionBounds(Форма, ИдентификаторРедактора, НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);

EndProcedure

Procedure InsertTextInCursorLocation(Форма, ИдентификаторРедактора, Текст) Экспорт
	ВидыРедакторов = UT_CodeEditorClientServer.ВариантыРедактораКода();
	ВидРедактора = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаВидРедактора()];

	РедакторыФормы = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	If Not ВсеРедакторыФормыИнициализированы(РедакторыФормы) Then
		Return;
	EndIf;
	
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	If ВидРедактора = ВидыРедакторов.Текст Then
		ЭлементРедактора = Форма.Элементы[ПараметрыРедактора.ПолеРедактора];
		ЭлементРедактора.ВыделенныйТекст = Текст;	
	ElseIf ВидРедактора = ВидыРедакторов.Ace Then
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.editor.insert(Текст);
	ElseIf ВидРедактора = ВидыРедакторов.Monaco Then
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.selectedText(Текст);
	EndIf;
EndProcedure

Procedure ВставитьТекстПоПозицииКурсораЭлементаФормы(Форма, Элемент, Текст) Экспорт
	ИдентификаторРедактора = UT_CodeEditorClientServer.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	If ИдентификаторРедактора = Undefined Then
		Return;
	EndIf;

	InsertTextInCursorLocation(Форма, ИдентификаторРедактора, Текст);
	
EndProcedure

Procedure AddCodeEditorContext(Форма, ИдентификаторРедактора, ДобавляемыйКонтекст) Экспорт
	ВидыРедакторов = UT_CodeEditorClientServer.ВариантыРедактораКода();
	ВидРедактора = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаВидРедактора()];

	РедакторыФормы = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	If Not ВсеРедакторыФормыИнициализированы(РедакторыФормы) Then
		Return;
	EndIf;
	
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	If ВидРедактора = ВидыРедакторов.Monaco Then
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;

		СоответствиеТипов = СоответствиеСсылочныхТиповКонфигурации();

		ОбъектыДобавления = New Structure;

		For Each КлючЗначение In ДобавляемыйКонтекст Do
			ОбъектДобавляемый = New Structure("ref");
			If TypeOf(КлючЗначение.Значение) = Type("Структура") Then
				ИмяТипа = КлючЗначение.Значение.Тип;
			
				ОбъектДобавляемый.Insert("properties", New Structure);

				For Each Свойство In КлючЗначение.Значение.ПодчиненныеСвойства Do
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОбъектДобавляемый.properties, Свойство, True,
						СоответствиеТипов);
				EndDo;
				
			Else
				ИмяТипа = КлючЗначение.Значение;
			EndIf;
			ОбъектДобавляемый.ref = ТипРедактораМонакоПоСтрокеТипа1С(ИмяТипа, СоответствиеТипов);
			ОбъектыДобавления.Insert(КлючЗначение.Ключ, ОбъектДобавляемый);
		EndDo;

		ДокументHTML.updateMetadata(UT_CommonClientServer.mWriteJSON(New Structure("customObjects",
			ОбъектыДобавления)));
	EndIf;
EndProcedure

Procedure ОткрытьКонструкторЗапроса(QueryText, NotifyDescriptionОЗавершении, РежимКомпоновки = False) Экспорт
#If Not МобильныйКлиент Then
	Конструктор=New КонструкторЗапроса;
	If UT_CommonClientServer.PlatformVersionNotLess_8_3_14() Then
		Конструктор.РежимКомпоновкиДанных=РежимКомпоновки;
	EndIf;

	If ЗначениеЗаполнено(СокрЛП(QueryText)) Then
		Конструктор.Текст=QueryText;
	EndIf;

	Конструктор.Показать(NotifyDescriptionОЗавершении);
#КонецЕсли
EndProcedure

Procedure ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, NotifyDescriptionОЗавершении) Экспорт
	Конструктор = New КонструкторФорматнойСтроки;
	Try
		Конструктор.Текст = ФорматнаяСтрока;
	Except
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение( , "Ошибка в тексте форматной строки:" + Chars.LF + Инфо.Причина.Описание);
		Return;
	EndTry;
	Конструктор.Показать(NotifyDescriptionОЗавершении);
EndProcedure

Procedure СохранитьМодулиКонфигурацииВФайлы(NotifyDescriptionОЗавершении, ТекущиеКаталоги) Экспорт
	ДопПараметрыОповещения = New Structure;
	ДопПараметрыОповещения.Insert("NotifyDescriptionОЗавершении", NotifyDescriptionОЗавершении);
	ДопПараметрыОповещения.Insert("ТекущиеКаталоги", ТекущиеКаталоги);

	UT_CommonClient.AttachFileSystemExtensionWithPossibleInstallation(
		New NotifyDescription("СохранитьМодулиКонфигурацииВФайлыЗавершениеПодключенияРасширенияРаботыСФайлами",
		ЭтотОбъект, ДопПараметрыОповещения));

EndProcedure

#EndRegion

#Region СлужебныйПрограммныйИнтерфейс

Procedure ФормаПриОткрытииЗавершениеПодключенияРасширенияРаботыСФайлами(Результат, ДополнительныеПараметры) Экспорт
	АдресБиблиотеки =  ДополнительныеПараметры.Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаАдресБиблиотеки()];
	If АдресБиблиотеки = Undefined Or Not ЗначениеЗаполнено(АдресБиблиотеки) Then
		ФормаПриОткрытииЗавершениеСохраненияБиблиотекиРедактора(True, ДополнительныеПараметры);
	Else
		ВидРедактора = ДополнительныеПараметры.Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаВидРедактора()];

		СохранитьБиблиотекуРедактораНаДиск(АдресБиблиотеки, ВидРедактора,
			New NotifyDescription("ФормаПриОткрытииЗавершениеСохраненияБиблиотекиРедактора", ЭтотОбъект,
			ДополнительныеПараметры));
	EndIf;
EndProcedure

Procedure ФормаПриОткрытииЗавершениеСохраненияБиблиотекиРедактора(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	ВидРедактора = Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаВидРедактора()];
	ВидыРедакторов = UT_CodeEditorClientServer.ВариантыРедактораКода();

	If UT_CodeEditorClientServer.РедакторКодаИспользуетПолеHTML(ВидРедактора) Then
		For Each КлючЗначение In Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()] Do
			//ИмяРеквизитаРедактора = УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКода(КлючЗначение.Значение.ИмяРеквизита);	

			If ВидРедактора = ВидыРедакторов.Monaco Then
				Форма[КлючЗначение.Значение.ИмяРеквизита] = КаталогСохраненияРедактора(ВидРедактора)
					+ GetPathSeparator() + "index.html";
			ElseIf ВидРедактора = ВидыРедакторов.Ace Then
				Форма[КлючЗначение.Значение.ИмяРеквизита] = ИмяФайлаРедактораAceДляЯзыка(КлючЗначение.Значение.Язык);
			EndIf;
		EndDo;
	Else
		CodeEditorDeferredInitializingEditors(Форма);
	EndIf;
	
	// Оповестим о завершении обработки инициализации редакторов при открытии формы
	NotifyDescriptionОЗавершении= ДополнительныеПараметры.NotifyDescriptionОЗавершении;
	If NotifyDescriptionОЗавершении = Undefined Then
		Return;
	EndIf;

	ВыполнитьОбработкуОповещения(NotifyDescriptionОЗавершении, True);
EndProcedure

Procedure СохранитьБиблиотекуРедактораНаДискЗавершениеСозданияКаталогаБиблиотеки(ИмяКаталога, ДополнительныеПараметры) Экспорт

	АдресБиблиотеки = ДополнительныеПараметры.АдресБиблиотеки;
	КаталогСохраненияБибилиотеки = ДополнительныеПараметры.КаталогСохраненияБибилиотеки;

	МассивСохраненныхФайлов = New Array;
	СоответствиеФайловБиблиотеки=ПолучитьИзВременногоХранилища(АдресБиблиотеки);

	If ДополнительныеПараметры.ВидРедактора = "Ace" Then
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
			КаталогСохраненияБибилиотеки, "bsl");
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
			КаталогСохраненияБибилиотеки, "css");
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
			КаталогСохраненияБибилиотеки, "javascript");
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
			КаталогСохраненияБибилиотеки, "html");
	EndIf;

	ДополнительныеПараметры.Insert("МассивСохраненныхФайлов", МассивСохраненныхФайлов);
	ДополнительныеПараметры.Insert("СоответствиеФайловБиблиотеки", СоответствиеФайловБиблиотеки);

	СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры);
EndProcedure

Procedure СохранитьБиблиотекуРедактораРаспаковатьБиблиотекуРедактораВКаталог(ДополнительныеПараметры,
	NotifyDescriptionОЗаверешнии) Экспорт
#If Not ВебКлиент And Not МобильныйКлиент Then
	Поток=ДополнительныеПараметры.СоответствиеФайловБиблиотеки[ДополнительныеПараметры.ТекКлючФайла].ОткрытьПотокДляЧтения();

	ЧтениеZIP=New ЧтениеZipФайла(Поток);
	ЧтениеZIP.ИзвлечьВсе(ДополнительныеПараметры.КаталогСохраненияБибилиотеки,
		РежимВосстановленияПутейФайловZIP.Восстанавливать);

#КонецЕсли

EndProcedure

Procedure СохранитьБиблиотекуРедактораРаспаковатьБиблиотекуРедактораВКаталогЗавершение(Результат,
	ДополнительныеПараметры) Экспорт

EndProcedure

Procedure СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаЗавершение(ДополнительныеПараметры) Экспорт
	МассивСохраненныхФайлов = ДополнительныеПараметры.МассивСохраненныхФайлов;
	МассивСохраненныхФайлов.Add(ДополнительныеПараметры.ТекКлючФайла);

	Файл = New Файл(ДополнительныеПараметры.ТекКлючФайла);

	If Файл.Расширение = ".zip" Then
		СохранитьБиблиотекуРедактораРаспаковатьБиблиотекуРедактораВКаталог(ДополнительныеПараметры,
			New NotifyDescription("СохранитьБиблиотекуРедактораРаспаковатьБиблиотекуРедактораВКаталогЗавершение",
			ЭтотОбъект, ДополнительныеПараметры));
	EndIf;	
		//Else
	СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры);
	//EndIf;
EndProcedure

Procedure СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаТекстовогоДокументаЗавершение(Результат,
	ДополнительныеПараметры) Экспорт
	МассивСохраненныхФайлов = ДополнительныеПараметры.МассивСохраненныхФайлов;
	МассивСохраненныхФайлов.Add(ДополнительныеПараметры.ТекКлючФайла);

	СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры);
EndProcedure

Procedure СохранитьБиблиотекуРедактораНаДискЗавершениеПроверкиСуществованияБиблиотекиНаДиске(Существует,
	ДополнительныеПараметры) Экспорт
	If Существует Then
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.NotifyDescriptionОЗавершении);
		Return;
	EndIf;

	КаталогСохраненияБибилиотеки = ДополнительныеПараметры.КаталогСохраненияБибилиотеки;

	НачатьСозданиеКаталога(
		New NotifyDescription("СохранитьБиблиотекуРедактораНаДискЗавершениеСозданияКаталогаБиблиотеки", ЭтотОбъект,
		ДополнительныеПараметры), КаталогСохраненияБибилиотеки);

EndProcedure

Procedure СохранитьМодулиКонфигурацииВФайлыЗавершениеПодключенияРасширенияРаботыСФайлами(Результат,
	ДополнительныеПараметры) Экспорт
	ПараметрыФормы = New Structure;
	ПараметрыФормы.Insert("ТекущиеКаталоги", ДополнительныеПараметры.ТекущиеКаталоги);

	ДополнительныеПараметрыОповещения = New Structure;
	ДополнительныеПараметрыОповещения.Insert("NotifyDescriptionОЗавершении",
		ДополнительныеПараметры.NotifyDescriptionОЗавершении);

	ОткрытьФорму("ОбщаяФорма.УИ_НастройкиСохраненияИсходныхФайловКонфигурации", ПараметрыФормы, , , , ,
		New NotifyDescription("СохранитьМодулиКонфигурацииВФайлыЗавершениеНастроек", ЭтотОбъект,
		ДополнительныеПараметрыОповещения), РежимОткрытияОкнаФормы.Независимый);

EndProcedure

Procedure СохранитьМодулиКонфигурацииВФайлыЗавершениеНастроек(Результат, ДополнительныеПараметры) Экспорт
	If Результат = Undefined Then
		Return;
	EndIf;

	ОписаниеМетаданныхКонфигурации = UT_CodeEditorServerCall.ОписаниеМетаданныхКонфигурации(False);

	ПараметрыСохраненияИсходныхФайлов = New Structure;
	ПараметрыСохраненияИсходныхФайлов.Insert("ОписаниеМетаданныхКонфигурации", ОписаниеМетаданныхКонфигурации);
	ПараметрыСохраненияИсходныхФайлов.Insert("Параметры", Результат);
	ПараметрыСохраненияИсходныхФайлов.Insert("ДополнительныеПараметры", ДополнительныеПараметры);
	ПараметрыСохраненияИсходныхФайлов.Insert("ИндексКаталога", 0);

	СохранитьМодулиКонфигурацииВФайлыНачалоОбработкиКаталогаИсточника(ПараметрыСохраненияИсходныхФайлов);

EndProcedure

Procedure СохранитьМодулиКонфигурацииВФайлыНачалоОбработкиКаталогаИсточника(ПараметрыСохранения)
	If ПараметрыСохранения.ИндексКаталога >= ПараметрыСохранения.Параметры.КаталогиИсточников.Количество() Then
		СохранитьМодулиКонфигурацииВФайлыЗавершение(ПараметрыСохранения);
		Return;
	EndIf;

	ОписаниеКаталогаИсточника = ПараметрыСохранения.Параметры.КаталогиИсточников[ПараметрыСохранения.ИндексКаталога];

	ПараметрыСохранения.Insert("ОписаниеКаталогаИсточника", ОписаниеКаталогаИсточника);
	
	//Сначала нужно очистить каталог
	НачатьУдалениеФайлов(New NotifyDescription("СохранитьМодулиКонфигурацииВФайлыЗавершениеУдалениеФайловКаталога",
		ЭтотОбъект, ПараметрыСохранения), ОписаниеКаталогаИсточника.Каталог, "*");

EndProcedure

Procedure СохранитьМодулиКонфигурацииВФайлыЗавершениеУдалениеФайловКаталога(ПараметрыСохранения) Экспорт
	If ПараметрыСохранения.ОписаниеКаталогаИсточника.ТолькоМодули Then
		СохранитьМодулиКонфигурацииВФайлыСохранитьСписокМетаданныхСМодулями(ПараметрыСохранения);
	Else
		СохранитьМодулиКонфигурацииВФайлыЗАпуститьКонфигуратовДляВыгрузкиМетаданных(ПараметрыСохранения);
	EndIf;
EndProcedure

Procedure СохранитьМодулиКонфигурацииВФайлыСохранитьСписокМетаданныхСМодулями(ПараметрыСохранения) Экспорт
	ТекстМетаданных = New ТекстовыйДокумент;

	If ПараметрыСохранения.ОписаниеКаталогаИсточника.Источник <> "ОсновнаяКонфигурация" Then
		ИмяРасширения = ПараметрыСохранения.ОписаниеКаталогаИсточника.Источник;
	Else
		ИмяРасширения = Undefined;
	EndIf;
	
	For Each ТекКоллекция In ПараметрыСохранения.ОписаниеМетаданныхКонфигурации Do
		If TypeOf(ТекКоллекция.Значение)<> Type("Структура") Then
			Continue;
		EndIf;
		
		If ТекКоллекция.Ключ = "Справочники" Then
			ИмяКоллекцииДляФайла = "Catalog";
		ElseIf ТекКоллекция.Ключ = "Документы" Then
			ИмяКоллекцииДляФайла = "Document";
		ElseIf ТекКоллекция.Ключ = "РегистрыСведений" Then
			ИмяКоллекцииДляФайла = "InformationRegister";
		ElseIf ТекКоллекция.Ключ = "РегистрыНакопления" Then
			ИмяКоллекцииДляФайла = "AccumulationRegister";
		ElseIf ТекКоллекция.Ключ = "РегистрыБухгалтерии" Then
			ИмяКоллекцииДляФайла = "AccountingRegister";
		ElseIf ТекКоллекция.Ключ = "РегистрыРасчета" Then
			ИмяКоллекцииДляФайла = "CalculationRegister";
		ElseIf ТекКоллекция.Ключ = "Обработки" Then
			ИмяКоллекцииДляФайла = "DataProcessor";
		ElseIf ТекКоллекция.Ключ = "Отчеты" Then
			ИмяКоллекцииДляФайла = "Report";
		ElseIf ТекКоллекция.Ключ = "Перечисления" Then
			ИмяКоллекцииДляФайла = "Enum";
		ElseIf ТекКоллекция.Ключ = "ОбщиеМодули" Then
			ИмяКоллекцииДляФайла = "CommonModule";
		ElseIf ТекКоллекция.Ключ = "ПланыСчетов" Then
			ИмяКоллекцииДляФайла = "ChartOfAccounts";
		ElseIf ТекКоллекция.Ключ = "БизнесПроцессы" Then
			ИмяКоллекцииДляФайла = "BusinessProcess";
		ElseIf ТекКоллекция.Ключ = "Задачи" Then
			ИмяКоллекцииДляФайла = "Task";
		ElseIf ТекКоллекция.Ключ = "ПланыОбмена" Then
			ИмяКоллекцииДляФайла = "ExchangePlan";
		ElseIf ТекКоллекция.Ключ = "ПланыВидовХарактеристик" Then
			ИмяКоллекцииДляФайла = "ChartOfCharacteristicTypes";
		ElseIf ТекКоллекция.Ключ = "ПланыВидовРасчета" Then
			ИмяКоллекцииДляФайла = "ChartOfCalculationTypes";
		ElseIf ТекКоллекция.Ключ = "Константы" Then
			ИмяКоллекцииДляФайла = "Constant";
		Else
			Continue;
		EndIf;
		
		For Each КлючЗначениеМетаданных In ТекКоллекция.Значение Do
			If КлючЗначениеМетаданных.Значение.Расширение<>ИмяРасширения Then
				Continue;
			EndIf;
			ТекстМетаданных.ДобавитьСтроку(ИмяКоллекцииДляФайла+"."+КлючЗначениеМетаданных.Ключ);
		EndDo;
	EndDo;
	
	SessionFileVariablesStructure = UT_CommonClient.SessionFileVariablesStructure();
	ИмяФайлаСохранения = SessionFileVariablesStructure.TempFilesDirectory + GetPathSeparator() + "tools_ui_1c_list_metadata.txt";
	ПараметрыСохранения.Insert("ИмяФайлаСпискаМетаданных", ИмяФайлаСохранения);
	ТекстМетаданных.НачатьЗапись(
		New NotifyDescription("СохранитьМодулиКонфигурацииВФайлыСохранитьСписокМетаданныхСМодулямиЗавершение",
		ЭтотОбъект, ПараметрыСохранения), ИмяФайлаСохранения);

EndProcedure

Procedure СохранитьМодулиКонфигурацииВФайлыСохранитьСписокМетаданныхСМодулямиЗавершение(Результат, ПараметрыСохранения) Экспорт
	If Результат<>True Then
		Message("Not удалось сохранить список метаданных с модулями в файл для источника "
			+ ПараметрыСохранения.ОписаниеКаталогаИсточника.Источник);

		ПараметрыСохранения.ИндексКаталога = ПараметрыСохранения.ИндексКаталога + 1;
		СохранитьМодулиКонфигурацииВФайлыНачалоОбработкиКаталогаИсточника(ПараметрыСохранения);
		Return;
	EndIf;	
	
	СохранитьМодулиКонфигурацииВФайлыЗАпуститьКонфигуратовДляВыгрузкиМетаданных(ПараметрыСохранения);

EndProcedure

Procedure СохранитьМодулиКонфигурацииВФайлыЗАпуститьКонфигуратовДляВыгрузкиМетаданных(ПараметрыСохранения) Экспорт
	СтрокаЗапускаПриложения = UT_StringFunctionsClientServer.WrapInOuotationMarks(
		ПараметрыСохранения.Параметры.ФайлЗапускаПлатформы) + " DESIGNER";

	If ПараметрыСохранения.Параметры.РасположениеБазы = 0 Then
		СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " /F " + UT_StringFunctionsClientServer.WrapInOuotationMarks(
			ПараметрыСохранения.Параметры.КаталогИнформационнойБазы);
	Else
		ПутьКБазе = ПараметрыСохранения.Параметры.СерверИБ + "\" + ПараметрыСохранения.Параметры.ИмяБазы;
		СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " /S " + UT_StringFunctionsClientServer.WrapInOuotationMarks(
			ПутьКБазе);
	EndIf;
	СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " /N" + UT_StringFunctionsClientServer.WrapInOuotationMarks(
		ПараметрыСохранения.Параметры.Пользователь);

	If ЗначениеЗаполнено(ПараметрыСохранения.Параметры.Пароль) Then
		СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " /P" + UT_StringFunctionsClientServer.WrapInOuotationMarks(
			ПараметрыСохранения.Параметры.Пароль);
	EndIf;
	СтрокаЗапускаПриложения = СтрокаЗапускаПриложения +" /DisableStartupMessages /DisableStartupDialogs";

	СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " /DumpConfigToFiles "
		+ UT_StringFunctionsClientServer.WrapInOuotationMarks(ПараметрыСохранения.ОписаниеКаталогаИсточника.Каталог)
		+ " -format Hierarchical";
		
	If ПараметрыСохранения.ОписаниеКаталогаИсточника.Источник <> "ОсновнаяКонфигурация" Then
		СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " -Extension "
			+ ПараметрыСохранения.ОписаниеКаталогаИсточника.Источник;
	EndIf;
	If ПараметрыСохранения.ОписаниеКаталогаИсточника.ТолькоМодули Then
		СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " -listFile "
			+ UT_StringFunctionsClientServer.WrapInOuotationMarks(ПараметрыСохранения.ИмяФайлаСпискаМетаданных);

	EndIf;
	SessionFileVariablesStructure = UT_CommonClient.SessionFileVariablesStructure();
	
	ПараметрыСохранения.Insert("ИмяФайлаЛогаЗапускаКонфигуратора",
		SessionFileVariablesStructure.TempFilesDirectory + GetPathSeparator()
		+ "tools_ui_1c_list_metadata_out.txt");

	СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " /Out " + UT_StringFunctionsClientServer.WrapInOuotationMarks(
		ПараметрыСохранения.ИмяФайлаЛогаЗапускаКонфигуратора);

	НачатьЗапускПриложения(
		New NotifyDescription("СохранитьМодулиКонфигурацииВФайлыЗавершениеВыгрузкиИсходниковМетаданныхВКаталог",
		ЭтотОбъект, ПараметрыСохранения), СтрокаЗапускаПриложения, , True);
EndProcedure

Procedure СохранитьМодулиКонфигурацииВФайлыЗавершениеВыгрузкиИсходниковМетаданныхВКаталог(КодЗавершения,
	ПараметрыСохранения) Экспорт
	If КодЗавершения <> 0 Then
		ТекстовыйДокумент = New ТекстовыйДокумент;

		ДополнительныеПараметрыОповещения = New Structure;
		ДополнительныеПараметрыОповещения.Insert("ТекстовыйДокумент", ТекстовыйДокумент);
		ДополнительныеПараметрыОповещения.Insert("ПараметрыСохранения", ПараметрыСохранения);

		ТекстовыйДокумент.НачатьЧтение(
			New NotifyDescription("СохранитьМодулиКонфигурацииВФайлыЗавершениеВыгрузкиИсходниковМетаданныхВКаталогЗавершениеЧтенияЛога",
			ЭтотОбъект, ДополнительныеПараметрыОповещения), ПараметрыСохранения.ИмяФайлаЛогаЗапускаКонфигуратора);
		Return;
	EndIf;
	ПараметрыСохранения.ИндексКаталога = ПараметрыСохранения.ИндексКаталога + 1;
	СохранитьМодулиКонфигурацииВФайлыНачалоОбработкиКаталогаИсточника(ПараметрыСохранения);
EndProcedure

Procedure СохранитьМодулиКонфигурацииВФайлыЗавершениеВыгрузкиИсходниковМетаданныхВКаталогЗавершениеЧтенияЛога(ДополнительныеПараметры) Экспорт
	ПараметрыСохранения = ДополнительныеПараметры.ПараметрыСохранения;
	ТекстовыйДокумент = ДополнительныеПараметры.ТекстовыйДокумент;
	Message("Not удалось сохранить исходные файлы для источника "
		+ ПараметрыСохранения.ОписаниеКаталогаИсточника.Источник + ":" + Chars.LF + ТекстовыйДокумент.ПолучитьТекст());
		
	ПараметрыСохранения.ИндексКаталога = ПараметрыСохранения.ИндексКаталога + 1;
	СохранитьМодулиКонфигурацииВФайлыНачалоОбработкиКаталогаИсточника(ПараметрыСохранения);

EndProcedure

Procedure СохранитьМодулиКонфигурацииВФайлыЗавершение(ПараметрыСохранения)
	ВыполнитьОбработкуОповещения(ПараметрыСохранения.ДополнительныеПараметры.NotifyDescriptionОЗавершении,
		ПараметрыСохранения.Параметры.КаталогиИсточников);
EndProcedure

#Region Monaco

Procedure ПриЗавершенииРедактированияФорматнойСтрокиMonaco(Текст, ДополнительныеПараметры) Экспорт
	If Текст = Undefined Then
		Return;
	EndIf;

	ФорматнаяСтрока = СтрЗаменить(Текст, "'", "");
	ФорматнаяСтрока = """" + ФорматнаяСтрока + """";

	ДокументView = ДополнительныеПараметры.Форма.Элементы[ДополнительныеПараметры.Элемент.Имя].Документ.defaultView;

	If ДополнительныеПараметры.Свойство("Позиция") Then
		УстановитьТекстMonaco(ДокументView, ФорматнаяСтрока, UT_CommonClientServer.mWriteJSON(
			ДополнительныеПараметры.Позиция), True);
	Else
		УстановитьТекстMonaco(ДокументView, ФорматнаяСтрока, , True);
	EndIf;
EndProcedure

Procedure ПриЗавершенииРедактированияЗапросаMonaco(Текст, ДополнительныеПараметры) Экспорт
	If Текст = Undefined Then
		Return;
	EndIf;

	QueryText = СтрЗаменить(Текст, Chars.LF, Chars.LF + "|");
	QueryText = СтрЗаменить(QueryText, """", """""");
	QueryText = """" + QueryText + """";

	ДокументView = ДополнительныеПараметры.Форма.Элементы[ДополнительныеПараметры.Элемент.Имя].Документ.defaultView;

	If ДополнительныеПараметры.Свойство("Позиция") Then
		УстановитьТекстMonaco(ДокументView, QueryText, UT_CommonClientServer.mWriteJSON(
			ДополнительныеПараметры.Позиция), True);
	Else
		УстановитьТекстMonaco(ДокументView, QueryText, , True);
	EndIf;
EndProcedure

Procedure ОткрытьКонструкторЗапросаMonacoЗавершениеВопроса(Результат, ДополнительныеПараметры) Экспорт
	If Результат <> КодВозвратаДиалога.Да Then
		Return;
	EndIf;
	ОткрытьКонструкторЗапроса("", New NotifyDescription("ПриЗавершенииРедактированияЗапросаMonaco", ЭтотОбъект,
		ДополнительныеПараметры));

EndProcedure

Procedure ОткрытьКонструкторФорматнойСтрокиMonacoЗавершениеВопроса(Результат, ДополнительныеПараметры) Экспорт
	If Результат <> КодВозвратаДиалога.Да Then
		Return;
	EndIf;
	ОткрытьКонструкторФорматнойСтроки("", New NotifyDescription("ПриЗавершенииРедактированияФорматнойСтрокиMonaco",
		ЭтотОбъект, ДополнительныеПараметры));

EndProcedure
#EndRegion
#EndRegion

#Region СлужебныеПроцедурыИФункции

Function ПодготовитьQueryTextДляКонструктора(Текст)

	QueryText = СтрЗаменить(Текст, "|", "");
	QueryText = СтрЗаменить(QueryText, """""", "$");
	QueryText = СтрЗаменить(QueryText, """", "");
	QueryText = СтрЗаменить(QueryText, "$", """");

	Return QueryText;
EndFunction

Function НовыйГраницыВыделения()
	Границы = New Structure;
	Границы.Insert("НачалоСтроки", 1);
	Границы.Insert("НачалоКолонки", 1);
	Границы.Insert("КонецСтроки", 1);
	Границы.Insert("КонецКолонки", 1);
	
	Return Границы;
EndFunction

#Region Monaco

Function ОписаниеМетаданныйДляИнициализацииРедактораMonaco()
	Описание = UT_ApplicationParameters["ОписаниеМетаданныйДляИнициализацииРедактораMonaco"];
	If Описание <> Undefined Then
		Return Описание;
	EndIf;

	ОписаниеКонфигурацииДляИнициализации = UT_CodeEditorServerCall.ОписнаиеМетаданныйДляИнициализацииРедактораMonaco();
	UT_ApplicationParameters.Insert("ОписаниеМетаданныйДляИнициализацииРедактораMonaco",
		ОписаниеКонфигурацииДляИнициализации);

	Return ОписаниеКонфигурацииДляИнициализации;

EndFunction

Procedure УстановитьТекстMonaco(ДокументView, Текст, Позиция = Undefined, УчитыватьОтступПервойСтроки = True)
	ДокументView.setText(Текст, Позиция);
EndProcedure

Procedure ОткрытьКонструкторФорматнойСтрокиMonaco(ПараметрыСобытия, ДополнительныеПараметры)
	If ПараметрыСобытия = Undefined Then
		UT_CommonClient.ShowQuestionToUser(
			New NotifyDescription("ОткрытьКонструкторФорматнойСтрокиMonacoЗавершениеВопроса", ЭтотОбъект,
			ДополнительныеПараметры), "Форматная строка не найдена." + Chars.LF + "Создать новую форматную строку?",
			РежимДиалогаВопрос.ДаНет);
	Else
		ФорматнаяСтрока = СтрЗаменить(СтрЗаменить(ПараметрыСобытия.text, "|", ""), """", "");

		ПараметрыОповещения = ДополнительныеПараметры;

		Позиция = New Structure;
		Позиция.Insert("startLineNumber", ПараметрыСобытия.range.startLineNumber);
		Позиция.Insert("startColumn", ПараметрыСобытия.range.startColumn);
		Позиция.Insert("endLineNumber", ПараметрыСобытия.range.endLineNumber);
		Позиция.Insert("endColumn", ПараметрыСобытия.range.endColumn);

		ПараметрыОповещения.Insert("Позиция", Позиция);

		ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока,
			New NotifyDescription("ПриЗавершенииРедактированияФорматнойСтрокиMonaco", ЭтотОбъект,
			ПараметрыОповещения));
	EndIf;
EndProcedure

Procedure ОткрытьКонструкторЗапросаMonaco(ПараметрыСобытия, ДополнительныеПараметры)
	If ПараметрыСобытия = Undefined Then
		UT_CommonClient.ShowQuestionToUser(
			New NotifyDescription("ОткрытьКонструкторЗапросаMonacoЗавершениеВопроса", ЭтотОбъект,
			ДополнительныеПараметры), "Not найден текст запроса." + Chars.LF + "Создать новый запрос?",
			РежимДиалогаВопрос.ДаНет);
	Else
		QueryText = ПодготовитьQueryTextДляКонструктора(ПараметрыСобытия.text);

		ПараметрыОповещения = ДополнительныеПараметры;

		Позиция = New Structure;
		Позиция.Insert("startLineNumber", ПараметрыСобытия.range.startLineNumber);
		Позиция.Insert("startColumn", ПараметрыСобытия.range.startColumn);
		Позиция.Insert("endLineNumber", ПараметрыСобытия.range.endLineNumber);
		Позиция.Insert("endColumn", ПараметрыСобытия.range.endColumn);

		ПараметрыОповещения.Insert("Позиция", Позиция);

		ОткрытьКонструкторЗапроса(QueryText, New NotifyDescription("ПриЗавершенииРедактированияЗапросаMonaco",
			ЭтотОбъект, ПараметрыОповещения));
	EndIf;
EndProcedure

Procedure ПолеРедактораHTMLПриНажатииMonaco(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Событие = ДанныеСобытия.Event.eventData1C;

	If Событие = Undefined Then
		Return;
	EndIf;

	If Событие.event = "EVENT_QUERY_CONSTRUCT" Then
		ДополнительныеПараметры = New Structure;
		ДополнительныеПараметры.Insert("Форма", Форма);
		ДополнительныеПараметры.Insert("Элемент", Элемент);

		ОткрытьКонструкторЗапросаMonaco(Событие.params, ДополнительныеПараметры);
	ElseIf Событие.event = "EVENT_FORMAT_CONSTRUCT" Then
		ДополнительныеПараметры = New Structure;
		ДополнительныеПараметры.Insert("Форма", Форма);
		ДополнительныеПараметры.Insert("Элемент", Элемент);

		ОткрытьКонструкторФорматнойСтрокиMonaco(Событие.params, ДополнительныеПараметры);
	ElseIf Событие.event = "EVENT_GET_METADATA" Then
		ДополнительныеПараметры = New Structure;
		ДополнительныеПараметры.Insert("Форма", Форма);
		ДополнительныеПараметры.Insert("Элемент", Элемент);

		МассивИменМетаданного = СтрРазделить(Событие.params, ".");

		If МассивИменМетаданного[0] = "module" Then

			УстановитьОписаниеМодуляДляРедактораMonaco(Событие.params, ДополнительныеПараметры);

		Else

			УстановитьОписаниеМетаданныхДляРедактораMonaco(Событие.params, ДополнительныеПараметры);

		EndIf;
	EndIf;
EndProcedure

Function ИмяКаталогаВидаМетаданных(ВидОбъектаМетаданных)
	If ВидОбъектаМетаданных = "справочники" Then
		Return "Catalogs";
	ElseIf ВидОбъектаМетаданных = "документы" Then
		Return "Documents";
	ElseIf ВидОбъектаМетаданных = "константы" Then
		Return "Constants";
	ElseIf ВидОбъектаМетаданных = "перечисления" Then
		Return "Enums";
	ElseIf ВидОбъектаМетаданных = "отчеты" Then
		Return "Reports";
	ElseIf ВидОбъектаМетаданных = "обработки" Then
		Return "DataProcessors";
	ElseIf ВидОбъектаМетаданных = "планывидовхарактеристик" Then
		Return "ChartsOfCharacteristicTypes";
	ElseIf ВидОбъектаМетаданных = "планысчетов" Then
		Return "ChartsOfAccounts";
	ElseIf ВидОбъектаМетаданных = "планывидоврасчета" Then
		Return "ChartsOfCalculationTypes";
	ElseIf ВидОбъектаМетаданных = "регистрысведений" Then
		Return "InformationRegisters";
	ElseIf ВидОбъектаМетаданных = "регистрынакопления" Then
		Return "AccumulationRegisters";
	ElseIf ВидОбъектаМетаданных = "регистрыбухгалтерии" Then
		Return "AccountingRegisters";
	ElseIf ВидОбъектаМетаданных = "регистрырасчета" Then
		Return "CalculationRegisters";
	ElseIf ВидОбъектаМетаданных = "бизнеспроцессы" Then
		Return "BusinessProcesses";
	ElseIf ВидОбъектаМетаданных = "задачи" Then
		Return "Tasks";
	ElseIf ВидОбъектаМетаданных = "планыобмена" Then
		Return "ExchangePlans";
	EndIf;

EndFunction

Procedure НачатьПоискФайлаМодуляВКаталогеИсходныхФайлов(ДополнительныеПараметры)
	If ДополнительныеПараметры.КаталогиИсходников.Количество() <= ДополнительныеПараметры.ИндексКаталогаИсходников Then
		Return;
	EndIf;
	КаталогИсходныхФайлов = ДополнительныеПараметры.КаталогиИсходников[ДополнительныеПараметры.ИндексКаталогаИсходников].Каталог;

	If Not ЗначениеЗаполнено(КаталогИсходныхФайлов) Then
		ДополнительныеПараметры.ИндексКаталогаИсходников = ДополнительныеПараметры.ИндексКаталогаИсходников + 1;
		НачатьПоискФайлаМодуляВКаталогеИсходныхФайлов(ДополнительныеПараметры);
		Return;
	EndIf;

	ИмяКаталогаПоискаФайла = КаталогИсходныхФайлов + GetPathSeparator() + ДополнительныеПараметры.КаталогМодуля
		+ GetPathSeparator() + ДополнительныеПараметры.ОписаниеОбъектаМетаданных.Имя;
	ДополнительныеПараметры.Insert("ИмяКаталогаПоискаФайла", ИмяКаталогаПоискаФайла);

	НачатьПоискФайлов(New NotifyDescription("УстановитьОписаниеМодуляДляРедактораMonacoЗавершениеПоискаФайловМодуля",
		ЭтотОбъект, ДополнительныеПараметры), ИмяКаталогаПоискаФайла, ДополнительныеПараметры.ИмяФайлаМодуля, True);

EndProcedure

Procedure УстановитьОписаниеМодуляДляРедактораMonaco(ОбновляемыйОбъектМетаданных, ДополнительныеПараметры)
	МассивИменМетаданного = СтрРазделить(ОбновляемыйОбъектМетаданных, ".");

	If МассивИменМетаданного.Количество() < 2 Then
		Return;
	EndIf;

	РедакторыФормы = ДополнительныеПараметры.Форма[UT_CodeEditorClientServer.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	ИдентификаторРедактора = UT_CodeEditorClientServer.ИдентификаторРедактораПоЭлементуФормы(
		ДополнительныеПараметры.Форма, ДополнительныеПараметры.Элемент);
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];
	ДополнительныеПараметры.Insert("КаталогиИсходников", ПараметрыРедактора.ПараметрыРедактора.КаталогиИсходныхФайлов);

	If ДополнительныеПараметры.КаталогиИсходников.Количество() = 0 Then
		Return;
	EndIf;

	ДополнительныеПараметры.Insert("ИндексКаталогаИсходников", 0);

	ВидМодуля = МассивИменМетаданного[1];

	ДополнительныеПараметры.Insert("ОбновляемыйОбъектМетаданных", ОбновляемыйОбъектМетаданных);
	ДополнительныеПараметры.Insert("МассивИменМетаданного", МассивИменМетаданного);

	If ВидМодуля = "manager" Then
		ОписаниеОбъектаМетаданных = UT_CodeEditorServerCall.ОписаниеОбъектаМетаданныхКонфигурацииПоИмени(
			МассивИменМетаданного[2], МассивИменМетаданного[3]);

		КаталогМодуля = ИмяКаталогаВидаМетаданных(МассивИменМетаданного[2]);
		ИмяФайла = "ManagerModule.bsl";

		ДополнительныеПараметры.Insert("ЭтоОбщийМодуль", False);

	ElseIf ВидМодуля = "object" Then
		ОписаниеОбъектаМетаданных = UT_CodeEditorServerCall.ОписаниеОбъектаМетаданныхКонфигурацииПоИмени(
			МассивИменМетаданного[2], МассивИменМетаданного[3]);

		КаталогМодуля = ИмяКаталогаВидаМетаданных(МассивИменМетаданного[2]);
		ИмяФайла = "ObjectModule.bsl";

		ДополнительныеПараметры.Insert("ЭтоОбщийМодуль", False);
	Else
		ОписаниеОбъектаМетаданных = UT_CodeEditorServerCall.ОписаниеОбъектаМетаданныхКонфигурацииПоИмени(
			"ОбщиеМодули", МассивИменМетаданного[1]);

		КаталогМодуля = "CommonModules";
		ИмяФайла = "Module.bsl";

		ДополнительныеПараметры.Insert("ЭтоОбщийМодуль", True);
	EndIf;

	ДополнительныеПараметры.Insert("ОписаниеОбъектаМетаданных", ОписаниеОбъектаМетаданных);
	ДополнительныеПараметры.Insert("КаталогМодуля", КаталогМодуля);
	ДополнительныеПараметры.Insert("ИмяФайлаМодуля", ИмяФайла);

	НачатьПоискФайлаМодуляВКаталогеИсходныхФайлов(ДополнительныеПараметры);
EndProcedure
Procedure УстановитьОписаниеМодуляДляРедактораMonacoЗавершениеПоискаФайловМодуля(НайденныеФайлы,
	ДополнительныеПараметры) Экспорт
	If НайденныеФайлы = Undefined Then
		ДополнительныеПараметры.ИндексКаталогаИсходников = ДополнительныеПараметры.ИндексКаталогаИсходников + 1;
		НачатьПоискФайлаМодуляВКаталогеИсходныхФайлов(ДополнительныеПараметры);
		Return;
	EndIf;

	If НайденныеФайлы.Количество() = 0 Then
		ДополнительныеПараметры.ИндексКаталогаИсходников = ДополнительныеПараметры.ИндексКаталогаИсходников + 1;
		НачатьПоискФайлаМодуляВКаталогеИсходныхФайлов(ДополнительныеПараметры);
		Return;
	EndIf;

	ИмяФайла = НайденныеФайлы[0].ПолноеИмя;
	ДополнительныеПараметры.Insert("ИмяФайла", ИмяФайла);

	ТекстовыйДокумент = New ТекстовыйДокумент;

	ДополнительныеПараметры.Insert("ТекстовыйДокумент", ТекстовыйДокумент);
	ТекстовыйДокумент.НачатьЧтение(
		New NotifyDescription("УстановитьОписаниеМодуляДляРедактораMonacoЗавершениеЧтенияФайла", ЭтотОбъект,
		ДополнительныеПараметры), ДополнительныеПараметры.ИмяФайла);

EndProcedure

Procedure УстановитьОписаниеМодуляДляРедактораMonacoЗавершениеЧтенияФайла(ДополнительныеПараметры) Экспорт
	ТекстМодуля = ДополнительныеПараметры.ТекстовыйДОкумент.ПолучитьТекст();

	ДокументView = ДополнительныеПараметры.Элемент.Документ.defaultView;

	If ДополнительныеПараметры.ЭтоОбщийМодуль Then
		ДокументView.parseCommonModule(ДополнительныеПараметры.ОписаниеОбъектаМетаданных.Имя, ТекстМодуля, False);
	Else
		СоответствиеОбновляемыхОбъектовМетаданных = СоответствиеОбновляемыхОбъектовМетаданныхРедактораMonacoИПараметровСобытияОблновленияМетаданных();
		ОбновляемаяКоллекцияРедактора = СоответствиеОбновляемыхОбъектовМетаданных[ДополнительныеПараметры.ОписаниеОбъектаМетаданных.ВидОбъекта];
		ОбновляемаяКоллекцияРедактора = ОбновляемаяКоллекцияРедактора + "."
			+ ДополнительныеПараметры.ОписаниеОбъектаМетаданных.Имя + "."
			+ ДополнительныеПараметры.МассивИменМетаданного[1];

		ДокументView.parseMetadataModule(ТекстМодуля, ОбновляемаяКоллекцияРедактора);
	EndIf;
	ДокументView.triggerSuggestions();

EndProcedure

Procedure УстановитьОписаниеМетаданныхДляРедактораMonaco(ОбновляемыйОбъектМетаданных, ДополнительныеПараметры)

	МассивИменМетаданного = СтрРазделить(ОбновляемыйОбъектМетаданных, ".");

	ВидОбъекта = МассивИменМетаданного[0];

	СоответствиеОбновляемыхОбъектовМетаданных = СоответствиеОбновляемыхОбъектовМетаданныхРедактораMonacoИПараметровСобытияОблновленияМетаданных();
	ОбновляемаяКоллекцияРедактора = СоответствиеОбновляемыхОбъектовМетаданных[ВидОбъекта];

	If МассивИменМетаданного.Количество() = 1 Then
		ОбновляемыеДанные = New Structure;

		МассивИмен = UT_CodeEditorServerCall.СписокМетаданныхПоВиду(ВидОбъекта);
		For Each ТекИмя In МассивИмен Do
			ОбновляемыеДанные.Insert(ТекИмя, New Structure);
		EndDo;
	Else
		ОписаниеОбъектаМетаданных = UT_CodeEditorServerCall.ОписаниеОбъектаМетаданныхКонфигурацииПоИмени(
			ВидОбъекта, МассивИменМетаданного[1]);
		Описание = ОписаниеОбъектаМетаданныхДляРедактораMonaco(ОписаниеОбъектаМетаданных);

		ОбновляемыеДанные = Описание;

		ОбновляемаяКоллекцияРедактора = ОбновляемаяКоллекцияРедактора + "." + ОписаниеОбъектаМетаданных.Имя;
	EndIf;

	ДокументView = ДополнительныеПараметры.Элемент.Документ.defaultView;
	ДокументView.updateMetadata(UT_CommonClientServer.mWriteJSON(
			ОбновляемыеДанные), ОбновляемаяКоллекцияРедактора);

	ДокументView.triggerSuggestions();
EndProcedure

Function ВидОбъектаРедактораMonacoПоВидуОбъекта1С(ВидОбъекта)

EndFunction

Function ТипРедактораМонакоПоСтрокеТипа1С(Тип1СИлиСтрока, СоответствиеСсылочныхТипов)
	If СоответствиеСсылочныхТипов = Undefined Then
		Return "";
	EndIf;

	Тип1С = Тип1СИлиСтрока;
	If TypeOf(Тип1С) = Type("Строка") Then
		If СтрНайти(Тип1СИлиСтрока, ".") > 0 Then
			Return Тип1СИлиСтрока;
		EndIf;
		
		Try
			Тип1С = Type(Тип1С);
		Except
			Return "types." + Тип1СИлиСтрока;
		EndTry;
	EndIf;

	MetadataТипа=СоответствиеСсылочныхТипов[Тип1С];

	If MetadataТипа = Undefined Then
		If TypeOf(Тип1СИлиСтрока) = Type("Строка") Then
			Try
				Стр = Новый(Тип1СИлиСтрока);
				Return "classes." + Тип1СИлиСтрока;
			Except
				Return "types." + Тип1СИлиСтрока;
			EndTry;
		Else
			Return "";
		EndIf;
	EndIf;

	If MetadataТипа.ВидОбъекта = "Справочник" Then
		Return "catalogs." + MetadataТипа.Имя;
	ElseIf MetadataТипа.ВидОбъекта = "Документ" Then
		Return "documents." + MetadataТипа.Имя;
	ElseIf MetadataТипа.ВидОбъекта = "Задача" Then
		Return "tasks." + MetadataТипа.Имя;
	ElseIf MetadataТипа.ВидОбъекта = "ПланВидовРасчета" Then
		Return "chartsOfCalculationTypes." + MetadataТипа.Имя;
	ElseIf MetadataТипа.ВидОбъекта = "ПланВидовХарактеристик" Then
		Return "chartsOfCharacteristicTypes." + MetadataТипа.Имя;
	ElseIf MetadataТипа.ВидОбъекта = "ПланОбмена" Then
		Return "exchangePlans." + MetadataТипа.Имя;
	ElseIf MetadataТипа.ВидОбъекта = "ПланСчетов" Then
		Return "сhartsOfAccounts." + MetadataТипа.Имя;
	EndIf;

	Return "";
EndFunction

Function ПолучитьСвязьСОбъектомМетаданныхДляРедактораMonaco(Реквизит, СоответствиеТипов)

	Связь = "";

	Типы = Реквизит.Тип.Типы();

	Индекс = 0;

	For Each ТекТип In Типы Do
		Связь = ТипРедактораМонакоПоСтрокеТипа1С(ТекТип, СоответствиеТипов);

		If ЗначениеЗаполнено(Связь) Then
			Breack;
		EndIf;
	EndDo;
	Return Связь;

EndFunction

Procedure ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, Реквизит, ПолучатьСвязиРеквизита,
	СоответствиеТипов)

	Связь = "";
	If ПолучатьСвязиРеквизита Then
		Связь= ПолучитьСвязьСОбъектомМетаданныхДляРедактораMonaco(Реквизит, СоответствиеТипов);
	EndIf;

	ОписаниеРеквизита = New Structure("name", Реквизит.Имя);

	If ЗначениеЗаполнено(Связь) Then
		ОписаниеРеквизита.Insert("ref", Связь);
	EndIf;

	ОписаниеРеквизитов.Insert(Реквизит.Имя, ОписаниеРеквизита);

EndProcedure

Function ОписаниеОбъектаМетаданныхДляРедактораMonaco(ОписаниеОбъектаМетаданных)
	СоответствиеТипов = СоответствиеСсылочныхТиповКонфигурации();
	ОписаниеРеквизитов = New Structure;
	ОписаниеРесурсов = New Structure;
	ОписаниеПредопределенных = New Structure;
	ОписаниеТабличныхЧастей = New Structure;
	ДополнительныеСвойства = New Structure;

	If ОписаниеОбъектаМетаданных.ВидОбъекта = "Перечисление" Or ОписаниеОбъектаМетаданных.ВидОбъекта
		= "перечисления" Then

		For Each КлючЗначениеЗначенияПеречисления In ОписаниеОбъектаМетаданных.ЗначенияПеречисления Do
			ОписаниеРеквизитов.Insert(КлючЗначениеЗначенияПеречисления.Ключ, New Structure("name",
				КлючЗначениеЗначенияПеречисления.Значение));
		EndDo;

	Else

		If ОписаниеОбъектаМетаданных.Свойство("Реквизиты") Then
			For Each КлючЗначениеРеквизит In ОписаниеОбъектаМетаданных.Реквизиты Do
				ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, True,
					СоответствиеТипов);
			EndDo;
		EndIf;
		If ОписаниеОбъектаМетаданных.Свойство("СтандартныеРеквизиты") Then
			For Each КлючЗначениеРеквизит In ОписаниеОбъектаМетаданных.СтандартныеРеквизиты Do
				ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, False,
					СоответствиеТипов);
			EndDo;
		EndIf;
		If ОписаниеОбъектаМетаданных.Свойство("Предопределенные") Then
				
				//If ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Then
				//	
				//	Запрос = New Query(
				//	"ВЫБРАТЬ
				//	|	ПланСчетов.Код КАК Код,
				//	|	ПланСчетов.ИмяПредопределенныхДанных КАК Имя
				//	|ИЗ
				//	|	&Таблица КАК ПланСчетов
				//	|ГДЕ
				//	|	ПланСчетов.Предопределенный");				
				//						
				//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);
				//	
				//	Выборка = Query.Execute().Выбрать();
				//	
				//	Пока Выборка.Следующий() Do 
				//		ОписаниеПредопределенных.Insert(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
				//	EndDo;
				//	
				//Else				
			For Each КлючЗначениеИмя In ОписаниеОбъектаМетаданных.Предопределенные Do
				ОписаниеПредопределенных.Insert(КлючЗначениеИмя.Ключ, "");
			EndDo;
				
				//EndIf;

		EndIf;

		If ОписаниеОбъектаМетаданных.Свойство("Измерения") Then

			For Each КлючЗначениеРеквизит In ОписаниеОбъектаМетаданных.Измерения Do
				ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, True,
					СоответствиеТипов);
			EndDo;
			For Each КлючЗначениеРеквизит In ОписаниеОбъектаМетаданных.Ресурсы Do
				ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, True,
					СоответствиеТипов);
			EndDo;
				
				//ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);				

		EndIf;

		If ОписаниеОбъектаМетаданных.Свойство("ТабличныеЧасти") Then

			For Each КлючЗначениеТабличнаяЧасть In ОписаниеОбъектаМетаданных.ТабличныеЧасти Do

				ТабличнаяЧасть = КлючЗначениеТабличнаяЧасть.Значение;
				ОписаниеРеквизитов.Insert(ТабличнаяЧасть.Имя, New Structure("name", "ТЧ: "
					+ ТабличнаяЧасть.Синоним));

				ОписаниеТабличнойЧасти = New Structure;

				If ТабличнаяЧасть.Свойство("СтандартныеРеквизиты") Then
					For Each РеквизитТЧ In ТабличнаяЧасть.СтандартныеРеквизиты Do
						ОписаниеТабличнойЧасти.Insert(РеквизитТЧ.Значение.Имя, РеквизитТЧ.Значение.Синоним);
					EndDo;
				EndIf;

				If ТабличнаяЧасть.Свойство("Реквизиты") Then
					For Each РеквизитТЧ In ТабличнаяЧасть.Реквизиты Do
						ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеТабличнойЧасти, РеквизитТЧ.Значение,
							True, СоответствиеТипов);
					EndDo;
				EndIf;

				ОписаниеТабличныхЧастей.Insert(ТабличнаяЧасть.Имя, ОписаниеТабличнойЧасти);

			EndDo;

		EndIf;
		If ОписаниеОбъектаМетаданных.Свойство("СтандартныеТабличныеЧасти") Then

			For Each КлючЗначениеТабличнаяЧасть In ОписаниеОбъектаМетаданных.СтандартныеТабличныеЧасти Do

				ТабличнаяЧасть = КлючЗначениеТабличнаяЧасть.Значение;
				ОписаниеРеквизитов.Insert(ТабличнаяЧасть.Имя, New Structure("name", "ТЧ: "
					+ ТабличнаяЧасть.Синоним));

				ОписаниеТабличнойЧасти = New Structure;

				If ТабличнаяЧасть.Свойство("СтандартныеРеквизиты") Then
					For Each РеквизитТЧ In ТабличнаяЧасть.СтандартныеРеквизиты Do
						ОписаниеТабличнойЧасти.Insert(РеквизитТЧ.Значение.Имя, РеквизитТЧ.Значение.Синоним);
					EndDo;
				EndIf;

				If ТабличнаяЧасть.Свойство("Реквизиты") Then
					For Each РеквизитТЧ In ТабличнаяЧасть.Реквизиты Do
						ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеТабличнойЧасти, РеквизитТЧ.Значение,
							True, СоответствиеТипов);
					EndDo;
				EndIf;

				ОписаниеТабличныхЧастей.Insert(ТабличнаяЧасть.Имя, ОписаниеТабличнойЧасти);

			EndDo;

		EndIf;

	EndIf;

	СтруктураОбъекта = New Structure;
	СтруктураОбъекта.Insert("properties", ОписаниеРеквизитов);

	For Each Обход In ДополнительныеСвойства Do
		СтруктураОбъекта.Insert(Обход.Ключ, Обход.Значение);
	EndDo;

	If ОписаниеРесурсов.Количество() > 0 Then
		СтруктураОбъекта.Insert("resources", ОписаниеРесурсов);
	EndIf;

	If ОписаниеПредопределенных.Количество() > 0 Then
		СтруктураОбъекта.Insert("predefined", ОписаниеПредопределенных);
	EndIf;

	If ОписаниеТабличныхЧастей.Количество() > 0 Then
		СтруктураОбъекта.Insert("tabulars", ОписаниеТабличныхЧастей);
	EndIf;

	Return СтруктураОбъекта;
EndFunction

Function ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(Коллекция, СоответствиеТипов)

	ОписаниеКоллекции = New Structure;

	For Each КлючЗначениеЭлементКоллекции In Коллекция Do

		ОписаниеРеквизитов = New Structure;
		ОписаниеРесурсов = New Structure;
		ОписаниеПредопределенных = New Structure;
		ОписаниеТабличныхЧастей = New Structure;
		ДополнительныеСвойства = New Structure;

		ОбъектМетаданных = КлючЗначениеЭлементКоллекции.Значение;

		If ОбъектМетаданных.ВидОбъекта = "Перечисление" Then

			For Each КлючЗначениеЗначенияПеречисления In ОбъектМетаданных.ЗначенияПеречисления Do
				ОписаниеРеквизитов.Insert(КлючЗначениеЗначенияПеречисления.Ключ, New Structure("name",
					КлючЗначениеЗначенияПеречисления.Значение));
			EndDo;

		Else

			If ОбъектМетаданных.Свойство("Реквизиты") Then
				For Each КлючЗначениеРеквизит In ОбъектМетаданных.Реквизиты Do
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение,
						True, СоответствиеТипов);
				EndDo;
			EndIf;
			If ОбъектМетаданных.Свойство("СтандартныеРеквизиты") Then
				For Each КлючЗначениеРеквизит In ОбъектМетаданных.СтандартныеРеквизиты Do
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, False,
						СоответствиеТипов);
				EndDo;
			EndIf;
			If ОбъектМетаданных.Свойство("Предопределенные") Then
				
				//If ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Then
				//	
				//	Запрос = New Query(
				//	"ВЫБРАТЬ
				//	|	ПланСчетов.Код КАК Код,
				//	|	ПланСчетов.ИмяПредопределенныхДанных КАК Имя
				//	|ИЗ
				//	|	&Таблица КАК ПланСчетов
				//	|ГДЕ
				//	|	ПланСчетов.Предопределенный");				
				//						
				//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);
				//	
				//	Выборка = Query.Execute().Выбрать();
				//	
				//	Пока Выборка.Следующий() Do 
				//		ОписаниеПредопределенных.Insert(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
				//	EndDo;
				//	
				//Else				
				For Each КлючЗначениеИмя In ОбъектМетаданных.Предопределенные Do
					ОписаниеПредопределенных.Insert(КлючЗначениеИмя.Ключ, New Structure("name, ref",
						КлючЗначениеИмя.Ключ, ""));
				EndDo;
				
				//EndIf;

			EndIf;

			If ОбъектМетаданных.Свойство("Измерения") Then

				For Each КлючЗначениеРеквизит In ОбъектМетаданных.Измерения Do
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение,
						True, СоответствиеТипов);
				EndDo;
				For Each КлючЗначениеРеквизит In ОбъектМетаданных.Ресурсы Do
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение,
						True, СоответствиеТипов);
				EndDo;
				
				//ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);				

			EndIf;

			If ОбъектМетаданных.Свойство("ТабличныеЧасти") Then

				For Each КлючЗначениеТабличнаяЧасть In ОбъектМетаданных.ТабличныеЧасти Do

					ТабличнаяЧасть = КлючЗначениеТабличнаяЧасть.Значение;
					ОписаниеРеквизитов.Insert(ТабличнаяЧасть.Имя, New Structure("name", "ТЧ: "
						+ ТабличнаяЧасть.Синоним));

					ОписаниеТабличнойЧасти = New Structure;

					If ТабличнаяЧасть.Свойство("СтандартныеРеквизиты") Then
						For Each РеквизитТЧ In ТабличнаяЧасть.СтандартныеРеквизиты Do
							ОписаниеТабличнойЧасти.Insert(РеквизитТЧ.Значение.Имя, РеквизитТЧ.Значение.Синоним);
						EndDo;
					EndIf;

					If ТабличнаяЧасть.Свойство("Реквизиты") Then
						For Each РеквизитТЧ In ТабличнаяЧасть.Реквизиты Do
							ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеТабличнойЧасти, РеквизитТЧ.Значение,
								True, СоответствиеТипов);
						EndDo;
					EndIf;

					ОписаниеТабличныхЧастей.Insert(ТабличнаяЧасть.Имя, ОписаниеТабличнойЧасти);

				EndDo;

			EndIf;
			If ОбъектМетаданных.Свойство("СтандартныеТабличныеЧасти") Then

				For Each КлючЗначениеТабличнаяЧасть In ОбъектМетаданных.СтандартныеТабличныеЧасти Do

					ТабличнаяЧасть = КлючЗначениеТабличнаяЧасть.Значение;
					ОписаниеРеквизитов.Insert(ТабличнаяЧасть.Имя, New Structure("name", "ТЧ: "
						+ ТабличнаяЧасть.Синоним));

					ОписаниеТабличнойЧасти = New Structure;

					If ТабличнаяЧасть.Свойство("СтандартныеРеквизиты") Then
						For Each РеквизитТЧ In ТабличнаяЧасть.СтандартныеРеквизиты Do
							ОписаниеТабличнойЧасти.Insert(РеквизитТЧ.Значение.Имя, РеквизитТЧ.Значение.Синоним);
						EndDo;
					EndIf;

					If ТабличнаяЧасть.Свойство("Реквизиты") Then
						For Each РеквизитТЧ In ТабличнаяЧасть.Реквизиты Do
							ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеТабличнойЧасти, РеквизитТЧ.Значение,
								True, СоответствиеТипов);
						EndDo;
					EndIf;

					ОписаниеТабличныхЧастей.Insert(ТабличнаяЧасть.Имя, ОписаниеТабличнойЧасти);

				EndDo;

			EndIf;

		EndIf;

		СтруктураОбъекта = New Structure;
		СтруктураОбъекта.Insert("properties", ОписаниеРеквизитов);

		For Each Обход In ДополнительныеСвойства Do
			СтруктураОбъекта.Insert(Обход.Ключ, Обход.Значение);
		EndDo;

		If 0 < ОписаниеРесурсов.Количество() Then
			СтруктураОбъекта.Insert("resources", ОписаниеРесурсов);
		EndIf;

		If 0 < ОписаниеПредопределенных.Количество() Then
			СтруктураОбъекта.Insert("predefined", ОписаниеПредопределенных);
		EndIf;

		If 0 < ОписаниеТабличныхЧастей.Количество() Then
			СтруктураОбъекта.Insert("tabulars", ОписаниеТабличныхЧастей);
		EndIf;

		ОписаниеКоллекции.Insert(ОбъектМетаданных.Имя, СтруктураОбъекта);

	EndDo;

	Return ОписаниеКоллекции;

EndFunction

Function ПолучитьСписокОбъектовМетаданныхИзКоллекцииДляРедактораMonaco(Коллекция)

	ОписаниеКоллекции = New Structure;

	For Each КлючЗначение In Коллекция Do
		ОписаниеКоллекции.Insert(КлючЗначение.Ключ, New Structure);
	EndDo;

	Return ОписаниеКоллекции;

EndFunction

Function СоответствиеСсылочныхТиповКонфигурации()
	Соответствие = UT_ApplicationParameters["СоответствиеСсылочныхТиповКонфигурации"];
	If Соответствие <> Undefined Then
		Return Соответствие;
	EndIf;

	СоответствиеТипов = UT_CodeEditorServerCall.СоответствиеСсылочныхТипов();
	UT_ApplicationParameters.Insert("СоответствиеСсылочныхТиповКонфигурации", СоответствиеТипов);

	Return СоответствиеТипов;
EndFunction

Function ОписаниеМетаданныхКонфигурацииДляРедактораMonaco()
	ОписаниеМетаданных = UT_ApplicationParameters["ОписаниеМетаданныхДляРедактораMonaco"];
	If ОписаниеМетаданных <> Undefined Then
		Return ОписаниеМетаданных;
	EndIf;

	АдресОписанияМетаданных = UT_ApplicationParameters["АдресОписанияМетаданныхКонфигурации"];
	If Not ЭтоАдресВременногоХранилища(АдресОписанияМетаданных) Then
		АдресОписанияМетаданных = UT_CommonServerCall.ConfigurationMetadataDescriptionAdress();
		UT_ApplicationParameters.Insert("АдресОписанияМетаданныхКонфигурации", АдресОписанияМетаданных);
	EndIf;
	MetadataКонфигурации = ПолучитьИзВременногоХранилища(АдресОписанияМетаданных);

	СоответствиеТипов = MetadataКонфигурации.СоответствиеСсылочныхТипов;

	КоллекцияМетаданных = New Structure;
	КоллекцияМетаданных.Insert("catalogs", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		MetadataКонфигурации.Справочники, СоответствиеТипов));
	КоллекцияМетаданных.Insert("documents", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		MetadataКонфигурации.Документы, СоответствиеТипов));
	КоллекцияМетаданных.Insert("infoRegs", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		MetadataКонфигурации.РегистрыСведений, СоответствиеТипов));
	КоллекцияМетаданных.Insert("accumRegs", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		MetadataКонфигурации.РегистрыНакопления, СоответствиеТипов));
	КоллекцияМетаданных.Insert("accountRegs", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		MetadataКонфигурации.РегистрыБухгалтерии, СоответствиеТипов));
	КоллекцияМетаданных.Insert("calcRegs", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		MetadataКонфигурации.РегистрыРасчета, СоответствиеТипов));
	КоллекцияМетаданных.Insert("dataProc", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		MetadataКонфигурации.Обработки, СоответствиеТипов));
	КоллекцияМетаданных.Insert("reports", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		MetadataКонфигурации.Отчеты, СоответствиеТипов));
	КоллекцияМетаданных.Insert("enums", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		MetadataКонфигурации.Перечисления, СоответствиеТипов));
	КоллекцияМетаданных.Insert("commonModules", ПолучитьСписокОбъектовМетаданныхИзКоллекцииДляРедактораMonaco(
		MetadataКонфигурации.ОбщиеМодули));
	КоллекцияМетаданных.Insert("сhartsOfAccounts", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		MetadataКонфигурации.ПланыСчетов, СоответствиеТипов));
	КоллекцияМетаданных.Insert("businessProcesses", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		MetadataКонфигурации.БизнесПроцессы, СоответствиеТипов));
	КоллекцияМетаданных.Insert("tasks", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		MetadataКонфигурации.Задачи, СоответствиеТипов));
	КоллекцияМетаданных.Insert("exchangePlans", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		MetadataКонфигурации.ПланыОбмена, СоответствиеТипов));
	КоллекцияМетаданных.Insert("chartsOfCharacteristicTypes", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		MetadataКонфигурации.ПланыВидовХарактеристик, СоответствиеТипов));
	КоллекцияМетаданных.Insert("chartsOfCalculationTypes", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		MetadataКонфигурации.ПланыВидовРасчета, СоответствиеТипов));
	КоллекцияМетаданных.Insert("constants", ПолучитьСписокОбъектовМетаданныхИзКоллекцииДляРедактораMonaco(
		MetadataКонфигурации.Константы));

	UT_ApplicationParameters.Insert("ОписаниеМетаданныхДляРедактораMonaco",
		UT_CommonClientServer.CopyStructure(КоллекцияМетаданных));
	UT_ApplicationParameters.Insert("СоответствиеСсылочныхТиповКонфигурации", СоответствиеТипов);

	Return КоллекцияМетаданных;
EndFunction

Function СоответствиеОбновляемыхОбъектовМетаданныхРедактораMonacoИПараметровСобытияОблновленияМетаданных()
	Соответствие = New Structure;
	Соответствие.Insert("справочники", "catalogs.items");
	Соответствие.Insert("catalogs", "catalogs.items");
	Соответствие.Insert("документы", "documents.items");
	Соответствие.Insert("documents", "documents.items");
	Соответствие.Insert("регистрысведений", "infoRegs.items");
	Соответствие.Insert("informationregisters", "infoRegs.items");
	Соответствие.Insert("регистрынакопления", "accumRegs.items");
	Соответствие.Insert("accumulationregisters", "accumRegs.items");
	Соответствие.Insert("регистрыбухгалтерии", "accountRegs.items");
	Соответствие.Insert("accountingregisters", "accountRegs.items");
	Соответствие.Insert("регистрырасчета", "calcRegs.items");
	Соответствие.Insert("calculationregisters", "calcRegs.items");
	Соответствие.Insert("обработки", "dataProc.items");
	Соответствие.Insert("dataprocessors", "dataProc.items");
	Соответствие.Insert("отчеты", "reports.items");
	Соответствие.Insert("reports", "reports.items");
	Соответствие.Insert("перечисления", "enums.items");
	Соответствие.Insert("enums", "enums.items");
	Соответствие.Insert("планысчетов", "сhartsOfAccounts.items");
	Соответствие.Insert("chartsofaccounts", "сhartsOfAccounts.items");
	Соответствие.Insert("бизнеспроцессы", "businessProcesses.items");
	Соответствие.Insert("businessprocesses", "businessProcesses.items");
	Соответствие.Insert("задачи", "tasks.items");
	Соответствие.Insert("tasks", "tasks.items");
	Соответствие.Insert("планыобмена", "exchangePlans.items");
	Соответствие.Insert("exchangeplans", "exchangePlans.items");
	Соответствие.Insert("планывидовхарактеристик", "chartsOfCharacteristicTypes.items");
	Соответствие.Insert("chartsofcharacteristictypes", "chartsOfCharacteristicTypes.items");
	Соответствие.Insert("планывидоврасчета", "chartsOfCalculationTypes.items");
	Соответствие.Insert("chartsofcalculationtypes", "chartsOfCalculationTypes.items");
	Соответствие.Insert("константы", "constants.items");
	Соответствие.Insert("constants", "chartsOfCalculationTypes.items");
	Соответствие.Insert("module", "commonModules.items");

	Return Соответствие;
EndFunction

#EndRegion
Procedure СохранитьБиблиотекуРедактораНаДиск(АдресБиблиотеки, ВидРедактора, NotifyDescriptionОЗавершении)
	КаталогСохраненияБибилиотеки=КаталогСохраненияРедактора(ВидРедактора);
	ФайлРедактора=New Файл(КаталогСохраненияБибилиотеки);

	ДопПараметры= New Structure;
	ДопПараметры.Insert("АдресБиблиотеки", АдресБиблиотеки);
	ДопПараметры.Insert("КаталогСохраненияБибилиотеки", КаталогСохраненияБибилиотеки);
	ДопПараметры.Insert("ВидРедактора", ВидРедактора);
	ДопПараметры.Insert("NotifyDescriptionОЗавершении", NotifyDescriptionОЗавершении);
	ФайлРедактора.НачатьПроверкуСуществования(
		New NotifyDescription("СохранитьБиблиотекуРедактораНаДискЗавершениеПроверкиСуществованияБиблиотекиНаДиске",
		ЭтотОбъект, ДопПараметры));
EndProcedure

Procedure СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры)
	МассивСохраненныхФайлов = ДополнительныеПараметры.МассивСохраненныхФайлов;
	КаталогСохраненияБибилиотеки = ДополнительныеПараметры.КаталогСохраненияБибилиотеки;
	СоответствиеФайловБиблиотеки = ДополнительныеПараметры.СоответствиеФайловБиблиотеки;
	ЕстьНеСохраненное = False;
	For Each КлючЗначение In СоответствиеФайловБиблиотеки Do
		If МассивСохраненныхФайлов.Find(КлючЗначение.Ключ) <> Undefined Then
			Continue;
		EndIf;
		ЕстьНеСохраненное = True;

		ИмяФайла=КаталогСохраненияБибилиотеки + GetPathSeparator() + КлючЗначение.Ключ;
		ДополнительныеПараметры.Insert("ТекКлючФайла", КлючЗначение.Ключ);

		If TypeOf(КлючЗначение.Значение) = Type("ТекстовыйДокумент") Then
			ОповещениеОЗаверешении = New NotifyDescription("СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаТекстовогоДокументаЗавершение",
				ЭтотОбъект, ДополнительныеПараметры);
		Else
			ОповещениеОЗаверешении = New NotifyDescription("СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаЗавершение",
				ЭтотОбъект, ДополнительныеПараметры);
		EndIf;

		КлючЗначение.Значение.НачатьЗапись(ОповещениеОЗаверешении, ИмяФайла);
		Breack;
	EndDo;

	If Not ЕстьНеСохраненное Then
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.NotifyDescriptionОЗавершении, True);
	EndIf;
EndProcedure

Function КаталогСохраненияРедактора(ВидРедактора)
	СтруктураФайловыхПеременных=UT_CommonClient.SessionFileVariablesStructure();
	If Not СтруктураФайловыхПеременных.Свойство("TempFilesDirectory") Then
		Return "";
	EndIf;

	Return СтруктураФайловыхПеременных.TempFilesDirectory + "tools_ui_1c" + GetPathSeparator() + Формат(
		UT_CommonClientServer.Version(), "ЧГ=0;") + GetPathSeparator() + ВидРедактора;
EndFunction

Function ИмяФайлаРедактораAceДляЯзыка(Язык = "bsl") Экспорт
	Return КаталогСохраненияРедактора(UT_CodeEditorClientServer.ВариантыРедактораКода().Ace)
		+ GetPathSeparator() + Язык + ".html";
EndFunction

Function ТекстHTMLРедактораКодаAce(КаталогСохраненияБибилиотеки, Язык)

	ТекстAce=КаталогСохраненияБибилиотеки + GetPathSeparator() + "ace" + GetPathSeparator() + "ace.js";
	ТекстLT=КаталогСохраненияБибилиотеки + GetPathSeparator() + "ace" + GetPathSeparator()
		+ "ext-language_tools.js";

	ТекЯзык=НРег(Язык);
	If ТекЯзык = "bsl" Then
		ТекЯзык="_1c";
	EndIf;
	ТекстHTML= "<!DOCTYPE html>
			   |<html lang=""ru"">
			   |<head>
			   |<title>ACE in Action</title>
			   |<style type=""text/css"" media=""screen"">
			   |    #editor { 
			   |        position: absolute;
			   |        top: 0;
			   |        right: 0;
			   |        bottom: 0;
			   |        left: 0;
			   |    }
			   |</style>
			   |</head>
			   |<body>
			   |
			   |<div id=""editor""></div>
			   |    
			   |<script src=""file://" + ТекстAce + """ type=""text/javascript"" charset=""utf-8""></script>
													|<script src=""file://" + ТекстLT + """ type=""text/javascript"" charset=""utf-8""></script>
																						|<script>
																						|    // trigger extension
																						|    ace.require(""ace/ext/language_tools"");
																						|    var editor = ace.edit(""editor"");
																						|    editor.session.setMode(""ace/mode/"
		+ ТекЯзык + """);
					|    editor.setTheme(""ace/theme/ones"");
					|    // enable autocompletion and snippets
					|    editor.setOptions({
					|        selectionStyle: 'line',
					|        highlightSelectedWord: true,
					|        showLineNumbers: true,
					|        enableBasicAutocompletion: true,
					|        enableSnippets: true,
					|        enableLiveAutocompletion: true
					|    });
					|
					|	editor.setHighlightSelectedWord(true);
					|
					|	function setSelection(startRow, startColumn, endRow, endColumn) {
					|		editor.clearSelection();
					|		var rangeEditor = new ace.Range(startRow, startColumn, endRow, endColumn);
					|       var selection = editor.getSelection();
					|       selection.setSelectionRange(rangeEditor, false);
					|		editor.centerSelection();
					|
					|	}
					|
					|</script>
					|
					|</body>
					|</html>";

	Return ТекстHTML;
EndFunction

Procedure ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
	КаталогСохраненияБибилиотеки, Язык)
	Текст= New ТекстовыйДокумент;
	Текст.УстановитьТекст(ТекстHTMLРедактораКодаAce(КаталогСохраненияБибилиотеки, Язык));

	СоответствиеФайловБиблиотеки.Insert(Язык + ".html", Текст);

EndProcedure
#EndRegion