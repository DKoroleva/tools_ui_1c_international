// Throws an exception if the user does not have the administration right.
Procedure RaiseIfNoAdministrationRights()
	
	CheckSystemAdministrationRights = True;
	If UT_Common.DataSeparationEnabled() And UT_Common.SeparatedDataUsageAvailable() Then
		CheckSystemAdministrationRights = False;
	EndIf;
	
	If NOT UT_Users.IsFullUser(, CheckSystemAdministrationRights) Then
		Raise NStr("ru = 'Нарушение прав доступа.'; en = 'Access right violation.'");
	EndIf;
	
EndProcedure

// Возвращает РегламентноеЗадание из информационной базы.
// Не предназначена для использования в модели сервиса.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  предопределенного регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание - регламентное задание из которого нужно получить
//                  уникальный идентификатор для получения свежей копии регламентного задания.
// 
// Возвращаемое значение:
//  РегламентноеЗадание - прочитано из базы данных.
//
Function ПолучитьРегламентноеЗадание(Знач Идентификатор) Экспорт

	ВызватьИсключениеЕслиНетПраваАдминистрирования();

	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;

	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;

	Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
		РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Идентификатор);
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	КонецЕсли;

	Если РегламентноеЗадание = Неопределено Тогда
		ВызватьИсключение (НСтр("ru = 'Регламентное задание не найдено.
								|Возможно, оно удалено другим пользователем.'"));
	КонецЕсли;

	Возврат РегламентноеЗадание;

EndFunction

// Добавляет новое задание в очередь или как регламентное.
// 
// Параметры: 
//  Параметры - Структура - Параметры добавляемого задания, возможные ключи:
//   Использование
//   Метаданные - обязательно для указания.
//   Параметры
//   Ключ
//   ИнтервалПовтораПриАварийномЗавершении.
//   Расписание
//   КоличествоПовторовПриАварийномЗавершении.
//
// Возвращаемое значение: 
//  РегламентноеЗадание, СправочникСсылка.ОчередьЗаданий, СправочникСсылка.ОчередьЗаданийОбластейДанных - Идентификатор
//  добавленного задания.
// 
Function ДобавитьЗадание(Параметры) Экспорт

	ВызватьИсключениеЕслиНетПраваАдминистрирования();

	ПараметрыЗадания = UT_CommonClientServer.CopyStructure(Параметры);

	//Если УИ_ОбщегоНазначения.DataSeparationEnabled() Тогда

	//	Если УИ_ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
	//		МодульРаботаВМоделиСервиса = УИ_ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");

	//		Если УИ_ОбщегоНазначения.SeparatedDataUsageAvailable() Тогда
	//			ОбластьДанных = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	//			ПараметрыЗадания.Вставить("ОбластьДанных", ОбластьДанных);
	//		КонецЕсли;

	//		МетаданныеЗадания = ПараметрыЗадания.Метаданные;
	//		ИмяМетода = МетаданныеЗадания.ИмяМетода;
	//		ПараметрыЗадания.Вставить("ИмяМетода", ИмяМетода);

	//		ПараметрыЗадания.Удалить("Метаданные");
	//		ПараметрыЗадания.Удалить("Наименование");

	//		МодульОчередьЗаданий = УИ_ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
	//		Задание = МодульОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
	//		СписокЗаданий = МодульОчередьЗаданий.ПолучитьЗадания(Новый Структура("Идентификатор", Задание));
	//		Для Каждого Задание Из СписокЗаданий Цикл
	//			Возврат Задание;
	//		КонецЦикла;

	//	КонецЕсли;

	//Иначе

		МетаданныеЗадания = ПараметрыЗадания.Метаданные;
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(МетаданныеЗадания);

		Если ПараметрыЗадания.Свойство("Наименование") Тогда
			Задание.Наименование = ПараметрыЗадания.Наименование;
		Иначе
			Задание.Наименование = МетаданныеЗадания.Наименование;
		КонецЕсли;

		Если ПараметрыЗадания.Свойство("Использование") Тогда
			Задание.Использование = ПараметрыЗадания.Использование;
		Иначе
			Задание.Использование = МетаданныеЗадания.Использование;
		КонецЕсли;

		Если ПараметрыЗадания.Свойство("Ключ") Тогда
			Задание.Ключ = ПараметрыЗадания.Ключ;
		Иначе
			Задание.Ключ = МетаданныеЗадания.Ключ;
		КонецЕсли;

		Если ПараметрыЗадания.Свойство("ИмяПользователя") Тогда
			Задание.ИмяПользователя = ПараметрыЗадания.ИмяПользователя;
		КонецЕсли;

		Если ПараметрыЗадания.Свойство("ИнтервалПовтораПриАварийномЗавершении") Тогда
			Задание.ИнтервалПовтораПриАварийномЗавершении = ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении;
		Иначе
			Задание.ИнтервалПовтораПриАварийномЗавершении = МетаданныеЗадания.ИнтервалПовтораПриАварийномЗавершении;
		КонецЕсли;

		Если ПараметрыЗадания.Свойство("КоличествоПовторовПриАварийномЗавершении") Тогда
			Задание.КоличествоПовторовПриАварийномЗавершении = ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении;
		Иначе
			Задание.КоличествоПовторовПриАварийномЗавершении = МетаданныеЗадания.КоличествоПовторовПриАварийномЗавершении;
		КонецЕсли;

		Если ПараметрыЗадания.Свойство("Параметры") Тогда
			Задание.Параметры = ПараметрыЗадания.Параметры;
		КонецЕсли;

		Если ПараметрыЗадания.Свойство("Расписание") Тогда
			Задание.Расписание = ПараметрыЗадания.Расписание;
		КонецЕсли;

		Задание.Записать();

	//КонецЕсли;

	Возврат Задание;

EndFunction
// Возвращает расписание регламентного задания.
// Перед вызовом требуется иметь право Администрирования или УстановитьПривилегированныйРежим.
// Не предназначена для использования в модели сервиса.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  предопределенного регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание - регламентное задание.
//
//  ВСтруктуре    - Булево - если Истина, тогда расписание будет преобразовано
//                  в структуру, которую можно передать на клиент.
// 
// Возвращаемое значение:
//  РасписаниеРегламентногоЗадания, Структура - структура содержит те же свойства, что и расписание.
// 
Function РасписаниеРегламентногоЗадания(Знач Идентификатор, Знач ВСтруктуре = Ложь) Экспорт

	ВызватьИсключениеЕслиНетПраваАдминистрирования();

	Задание = ПолучитьРегламентноеЗадание(Идентификатор);

	Если ВСтруктуре Тогда
		Возврат UT_CommonClientServer.ScheduleToStructure(Задание.Расписание);
	КонецЕсли;

	Возврат Задание.Расписание;

EndFunction

// Sets the scheduled job schedule.
// Before calling, it is required to have the administrator rights or SetPrivilegedMode.
// Cannot be used in SaaS mode.
//
// Parameters:
//  ID - MetadataObject - metadata object of a scheduled job to search the predefined scheduled job.
//                  
//                - UUID - an ID of the scheduled job.
//                - String - a scheduled job UUID string.
//                - ScheduledJob - a scheduled job.
//
//  Schedule    - JobSchedule - a schedule.
//                - Structure - the value returned by the ScheduleToStructure function of the 
//                  CommonClientServer common module.
//  
Procedure SetJobSchedule(Val ID, Val Schedule) Export
	
	RaiseIfNoAdministrationRights();
	
	Job = GetScheduledJob(ID);
	
	If TypeOf(Schedule) = Type("JobSchedule") Then
		Job.Schedule = Schedule;
	Else
		Job.Schedule = UT_CommonClientServer.StructureToSchedule(Schedule);
EndIf;
	
	Job.Write();
	
EndProcedure

Function GetScheduledJobObject(JobUniqueNumber) Export
	
	Try
		If Not IsBlankString(JobUniqueNumber) Then
			JobUUID = New UUID(JobUniqueNumber);
			CurrentScheduledJob = ScheduledJobs.FindByUUID(JobUUID);
		Else
			CurrentScheduledJob = Undefined;
		EndIf;
		
	Except
		CurrentScheduledJob = Undefined;
    EndTry;
	
	Return CurrentScheduledJob;
	
EndFunction

Function ПолучитьОбъектФоновогоЗадания(УникальныйНомерЗадания) Экспорт

	Попытка

		Если Не ПустаяСтрока(УникальныйНомерЗадания) Тогда
			УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(УникальныйНомерЗадания);
			ТекущееФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
		Иначе
			ТекущееФоновоеЗадание = Неопределено;
		КонецЕсли;

	Исключение
		ТекущееФоновоеЗадание = Неопределено;
	КонецПопытки;

	Возврат ТекущееФоновоеЗадание;

КонецФункции